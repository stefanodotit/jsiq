{"id":70,"questions":{"2":[{"question":"What's the difference between undefined and null?","answer":"<p>Before understanding the differences between&nbsp;<code>undefined</code>&nbsp;and&nbsp;<code>null</code>&nbsp;we must understand the similarities between them.</p>\n<ul>\n<li>They belong to&nbsp;<strong>JavaScript's</strong>&nbsp;7 primitive types.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code> <span class=\"kd\">let</span> <span class=\"nx\">primitiveTypes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">string</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"dl\">'</span><span class=\"s1\">number</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"dl\">'</span><span class=\"s1\">null</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"dl\">'</span><span class=\"s1\">undefined</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"dl\">'</span><span class=\"s1\">boolean</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"dl\">'</span><span class=\"s1\">symbol</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">bigint</span><span class=\"dl\">'</span><span class=\"p\">];</span>\n</code></pre>\n</div>\n<ul>\n<li>They are&nbsp;<strong>falsy</strong>&nbsp;values. Values that evaluated to false when converting it to boolean using&nbsp;<code>Boolean(value)</code>&nbsp;or&nbsp;<code>!!value</code>.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"kc\">null</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"kc\">undefined</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">));</span> <span class=\"c1\">//logs false</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">));</span> <span class=\"c1\">//logs false</span>\n</code></pre>\n</div>\n<p>Ok, let's talk about the differences.</p>\n<ul>\n<li><code>undefined</code>&nbsp;is the default value of a variable that has not been assigned a specific value. Or a function that has no&nbsp;<strong>explicit</strong>&nbsp;return value ex.&nbsp;<code>console.log(1)</code>. Or a property that does not exist in an object. The JavaScript engine does this for us the&nbsp;<strong>assigning</strong>&nbsp;of&nbsp;<code>undefined</code>&nbsp;value.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"kd\">let</span> <span class=\"nx\">_thisIsUndefined</span><span class=\"p\">;</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">doNothing</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{};</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">someObj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">a</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">ay</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">b</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">bee</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">c</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">si</span><span class=\"dl\">\"</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">_thisIsUndefined</span><span class=\"p\">);</span> <span class=\"c1\">//logs undefined</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">doNothing</span><span class=\"p\">());</span> <span class=\"c1\">//logs undefined</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">someObj</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">d</span><span class=\"dl\">\"</span><span class=\"p\">]);</span> <span class=\"c1\">//logs undefined</span>\n</code></pre>\n</div>\n<ul>\n<li><code>null</code>&nbsp;is&nbsp;<strong>\"a value that represents no value\"</strong>.&nbsp;<code>null</code>&nbsp;is value that has been&nbsp;<strong>explicitly</strong>&nbsp;defined to a variable. In this example we get a value of&nbsp;<code>null</code>&nbsp;when the&nbsp;<code>fs.readFile</code>&nbsp;method does not throw an error.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFile</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">path/to/file</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span> <span class=\"c1\">//it logs null when no error occurred</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">){</span>\n       <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n   <span class=\"p\">});</span>\n</code></pre>\n</div>\n<p>When comparing&nbsp;<code>null</code>&nbsp;and&nbsp;<code>undefined</code>&nbsp;we get&nbsp;<code>true</code>&nbsp;when using&nbsp;<code>==</code>&nbsp;and&nbsp;<code>false</code>&nbsp;when using&nbsp;<code>===</code>. You can read the reason&nbsp;<a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#14-whats-the-difference-between-and-\">here</a>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"kc\">null</span> <span class=\"o\">==</span> <span class=\"kc\">undefined</span><span class=\"p\">);</span> <span class=\"c1\">// logs true</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"kc\">null</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">);</span> <span class=\"c1\">// logs false</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":1},{"question":"What does the && operator do?","answer":"<p>The&nbsp;<code>&amp;&amp;</code>&nbsp;or&nbsp;<strong>Logical AND</strong>&nbsp;operator finds the first&nbsp;<em>falsy</em>&nbsp;expression in its operands and returns it and if it does not find any&nbsp;<em>falsy</em>&nbsp;expression it returns the last expression. It employs short-circuiting to prevent unnecessary work. I've used this in the&nbsp;<code>catch</code>&nbsp;block when closing database connection in one of my projects.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"kc\">false</span> <span class=\"o\">&amp;&amp;</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">[]);</span> <span class=\"c1\">//logs false</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span> <span class=\"dl\">\"</span> <span class=\"o\">&amp;&amp;</span> <span class=\"kc\">true</span> <span class=\"o\">&amp;&amp;</span> <span class=\"mi\">5</span><span class=\"p\">);</span> <span class=\"c1\">//logs 5</span>\n</code></pre>\n</div>\n<p>Using&nbsp;<strong>if</strong>&nbsp;statements.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"kd\">const</span> <span class=\"nx\">router</span><span class=\"p\">:</span> <span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"nx\">Router</span><span class=\"p\">();</span>\n\n  <span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/endpoint</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">:</span> <span class=\"nx\">Request</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n     <span class=\"kd\">let</span> <span class=\"na\">conMobile</span><span class=\"p\">:</span> <span class=\"nx\">PoolConnection</span><span class=\"p\">;</span>\n     <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"c1\">//do some db operations</span>\n     <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">conMobile</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">conMobile</span><span class=\"p\">.</span><span class=\"nx\">release</span><span class=\"p\">();</span>\n     <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n<p>Using&nbsp;<strong>&amp;&amp;</strong>&nbsp;operator.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">router</span><span class=\"p\">:</span> <span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"nx\">Router</span><span class=\"p\">();</span>\n\n<span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/endpoint</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">:</span> <span class=\"nx\">Request</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"na\">conMobile</span><span class=\"p\">:</span> <span class=\"nx\">PoolConnection</span><span class=\"p\">;</span>\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n     <span class=\"c1\">//do some db operations</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">conMobile</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">conMobile</span><span class=\"p\">.</span><span class=\"nx\">release</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":2},{"question":"What does the || operator do?","answer":"<p>The&nbsp;<code>||</code>&nbsp;or&nbsp;<strong>Logical OR</strong>&nbsp;operator finds the first&nbsp;<em>truthy</em>&nbsp;expression in its operands and returns it. This too employs short-circuiting to prevent unnecessary work. It was used before to initialize default parameter values IN functions before&nbsp;<strong>ES6 Default function parameters</strong>&nbsp;was supported.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"kc\">undefined</span><span class=\"p\">);</span> <span class=\"c1\">//logs 1</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">logName</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"nx\">name</span> <span class=\"o\">||</span> <span class=\"dl\">\"</span><span class=\"s2\">Mark</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">logName</span><span class=\"p\">();</span> <span class=\"c1\">//logs \"Mark\"</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":3},{"question":"Is using the + or unary plus operator the fastest way in converting a string to a number?","answer":"<p>According to&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_plus\">MDN Documentation</a>&nbsp;the&nbsp;<code>+</code>&nbsp;is the fastest way of converting a string to a number because it does not perform any operations on the value if it is already a number.</p>","categories":[{"name":"Code","id":2}],"id":4},{"question":"What is the DOM?","answer":"<p><strong>DOM</strong>&nbsp;stands for&nbsp;<strong>Document Object Model</strong>&nbsp;is an interface (<strong>API</strong>) for HTML and XML documents. When the browser first reads (<em>parses</em>) our HTML document it creates a big object, a really big object based on the HTML document this is the&nbsp;<strong>DOM</strong>. It is a tree-like structure that is modeled from the HTML document. The&nbsp;<strong>DOM</strong>&nbsp;is used for interacting and modifying the&nbsp;<strong>DOM structure</strong>&nbsp;or specific Elements or Nodes.</p>\n<p>Imagine if we have an HTML structure like this.</p>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>\n\n<span class=\"nt\">&lt;head&gt;</span>\n   <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"UTF-8\"</span><span class=\"nt\">&gt;</span>\n   <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"viewport\"</span> <span class=\"na\">content=</span><span class=\"s\">\"width=device-width, initial-scale=1.0\"</span><span class=\"nt\">&gt;</span>\n   <span class=\"nt\">&lt;meta</span> <span class=\"na\">http-equiv=</span><span class=\"s\">\"X-UA-Compatible\"</span> <span class=\"na\">content=</span><span class=\"s\">\"ie=edge\"</span><span class=\"nt\">&gt;</span>\n   <span class=\"nt\">&lt;title&gt;</span>Document Object Model<span class=\"nt\">&lt;/title&gt;</span>\n<span class=\"nt\">&lt;/head&gt;</span>\n\n<span class=\"nt\">&lt;body&gt;</span>\n   <span class=\"nt\">&lt;div&gt;</span>\n      <span class=\"nt\">&lt;p&gt;</span>\n         <span class=\"nt\">&lt;span&gt;&lt;/span&gt;</span>\n      <span class=\"nt\">&lt;/p&gt;</span>\n      <span class=\"nt\">&lt;label&gt;&lt;/label&gt;</span>\n      <span class=\"nt\">&lt;input&gt;</span>\n   <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n\n<span class=\"nt\">&lt;/html&gt;</span>\n\n</code></pre>\n</div>\n<p>The&nbsp;<strong>DOM</strong>&nbsp;equivalent would be like this.<br /><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z_mRQj0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/mbqphfbjfie45ynj0teo.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z_mRQj0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/mbqphfbjfie45ynj0teo.png\" alt=\"DOM equivalent\" loading=\"lazy\" /></a></p>\n<p>The&nbsp;<code>document</code>&nbsp;object in&nbsp;<strong>JavaScript</strong>&nbsp;represents the&nbsp;<strong>DOM</strong>. It provides us many methods that we can use to selecting elements to update element contents and many more.</p>","categories":[{"name":"Code","id":2}],"id":5},{"question":"What is Event Propagation?","answer":"<p>When an&nbsp;<strong>event</strong>&nbsp;occurs on a&nbsp;<strong>DOM</strong>&nbsp;element, that&nbsp;<strong>event</strong>&nbsp;does not entirely occur on that just one element. In the&nbsp;<strong>Bubbling Phase</strong>, the&nbsp;<strong>event</strong>&nbsp;bubbles up or it goes to its parent, to its grandparents, to its grandparent's parent until it reaches all the way to the&nbsp;<code>window</code>&nbsp;while in the&nbsp;<strong>Capturing Phase</strong>&nbsp;the event starts from the&nbsp;<code>window</code>&nbsp;down to the element that triggered the event or the&nbsp;<code><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#12-what-is-eventtarget-\">event.target</a></code>.</p>\n<p><strong>Event Propagation</strong>&nbsp;has&nbsp;<strong>three</strong>&nbsp;phases.</p>\n<ol>\n<li><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#8-whats-event-capturing\">Capturing Phase</a>&nbsp;&ndash; the event starts from&nbsp;<code>window</code>&nbsp;then goes down to every element until it reaches the target element.</li>\n<li><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#12-what-is-eventtarget-\">Target Phase</a>&nbsp;&ndash; the event has reached the target element.</li>\n<li><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#7-whats-event-bubbling\">Bubbling Phase</a>&nbsp;&ndash; the event bubbles up from the target element then goes up every element until it reaches the&nbsp;<code>window</code>.</li>\n</ol>\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Azk8KRbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hjayqa99iejfhbsujlqd.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Azk8KRbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hjayqa99iejfhbsujlqd.png\" alt=\"Event Propagation\" loading=\"lazy\" /></a></p>","categories":[{"name":"Code","id":2}],"id":6},{"question":"What's Event Bubbling?","answer":"<p>When an&nbsp;<strong>event</strong>&nbsp;occurs on a&nbsp;<strong>DOM</strong>&nbsp;element, that&nbsp;<strong>event</strong>&nbsp;does not entirely occur on that just one element. In the&nbsp;<strong>Bubbling Phase</strong>, the&nbsp;<strong>event</strong>&nbsp;bubbles up or it goes to its parent, to its grandparents, to its grandparent's parent until it reaches all the way to the&nbsp;<code>window</code>.</p>\n<p>If we have an example markup like this.</p>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"grandparent\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"parent\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"child\"</span><span class=\"nt\">&gt;</span>1<span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div>\n<p>And our js code.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">,</span> <span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">,</span> <span class=\"nx\">isCapture</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">el</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">event</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">callback</span> <span class=\"o\">||</span> <span class=\"k\">typeof</span> <span class=\"nx\">callback</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">function</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">el</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">string</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n  <span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">,</span> <span class=\"nx\">isCapture</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">DOMContentLoaded</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">child</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.child</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">parent</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.parent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">grandparent</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.grandparent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">child</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">parent</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">parent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">grandparent</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">grandparent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">document</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">html</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">html</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">window</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n<p>The&nbsp;<code>addEventListener</code>&nbsp;method has a third optional parameter&nbsp;<strong>useCapture</strong>&nbsp;with a default value of&nbsp;<code>false</code>&nbsp;the event will occur in the&nbsp;<strong>Bubbling phase</strong>&nbsp;if&nbsp;<code>true</code>&nbsp;the event will occur in the&nbsp;<strong>Capturing Phase</strong>. If we click on the&nbsp;<code>child</code>&nbsp;element it logs&nbsp;<code>child</code>,<code>parent</code>,<code>grandparent</code>,&nbsp;<code>html</code>,&nbsp;<code>document</code>&nbsp;and&nbsp;<code>window</code>&nbsp;respectively on the&nbsp;<strong>console</strong>. This is&nbsp;<strong>Event Bubbling</strong>.</p>","categories":[{"name":"Code","id":2}],"id":7},{"question":"What's Event Capturing?","answer":"<p>When an&nbsp;<strong>event</strong>&nbsp;occurs on a&nbsp;<strong>DOM</strong>&nbsp;element, that&nbsp;<strong>event</strong>&nbsp;does not entirely occur on that just one element. In&nbsp;<strong>Capturing Phase</strong>, the event starts from the&nbsp;<code>window</code>&nbsp;all the way down to the element that triggered the event.</p>\n<p>If we have an example markup like this.</p>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"grandparent\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"parent\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"child\"</span><span class=\"nt\">&gt;</span>1<span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div>\n<p>And our js code.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">,</span> <span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">,</span> <span class=\"nx\">isCapture</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">el</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">event</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">callback</span> <span class=\"o\">||</span> <span class=\"k\">typeof</span> <span class=\"nx\">callback</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">function</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">el</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">string</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n  <span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">,</span> <span class=\"nx\">isCapture</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">DOMContentLoaded</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">child</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.child</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">parent</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.parent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">grandparent</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.grandparent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">child</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">parent</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">parent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">grandparent</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">grandparent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">document</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">html</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">html</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">window</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n<p>The&nbsp;<code>addEventListener</code>&nbsp;method has a third optional parameter&nbsp;<strong>useCapture</strong>&nbsp;with a default value of&nbsp;<code>false</code>&nbsp;the event will occur in the&nbsp;<strong>Bubbling phase</strong>&nbsp;if&nbsp;<code>true</code>&nbsp;the event will occur in the&nbsp;<strong>Capturing Phase</strong>. If we click on the&nbsp;<code>child</code>&nbsp;element it logs&nbsp;<code>window</code>,<code>document</code>,<code>html</code>,&nbsp;<code>grandparent</code>&nbsp;and&nbsp;<code>parent</code>&nbsp;and&nbsp;<code>child</code>&nbsp;respectively on the&nbsp;<strong>console</strong>. This is&nbsp;<strong>Event Capturing</strong>.</p>","categories":[{"name":"Code","id":2}],"id":8},{"question":"What's the difference between event.preventDefault() and event.stopPropagation() methods?","answer":"<p>The&nbsp;<code>event.preventDefault()</code>&nbsp;method&nbsp;<strong>prevents</strong>&nbsp;the default behavior of an element. If used in a&nbsp;<code>form</code>&nbsp;element it&nbsp;<strong>prevents</strong>&nbsp;it from submitting. If used in an&nbsp;<code>anchor</code>&nbsp;element it&nbsp;<strong>prevents</strong>&nbsp;it from navigating. If used in a&nbsp;<code>contextmenu</code>&nbsp;it&nbsp;<strong>prevents</strong>&nbsp;it from showing or displaying. While the&nbsp;<code>event.stopPropagation()</code> method stops the propogation of an event or it stops the event from occurring in the bubbling or capturing phase.</p>","categories":[{"name":"Code","id":2}],"id":9},{"question":"How to know if the event.preventDefault() method was used in an element?","answer":"<p>We can use the&nbsp;<code>event.defaultPrevented</code>&nbsp;property in the event object. It returns a&nbsp;<code>boolean</code>&nbsp;indicating if the&nbsp;<code>event.preventDefault()</code>&nbsp;was called in a particular element.</p>","categories":[{"name":"Code","id":2}],"id":10},{"question":"Why does this code obj.someprop.x throw an error?","answer":"<p>Obviously, this throws an error due to the reason we are trying to access a<br /><code>x</code>&nbsp;property in the&nbsp;<code>someprop</code>&nbsp;property which have an&nbsp;<code>undefined</code>&nbsp;value. Remember&nbsp;<strong>properties</strong>&nbsp;in an object which does not exist in itself and its&nbsp;<strong>prototype</strong>&nbsp;has a default value of&nbsp;<code>undefined</code>&nbsp;and&nbsp;<code>undefined</code>&nbsp;has no property&nbsp;<code>x</code>.</p>","categories":[{"name":"Code","id":2}],"id":11},{"question":"What is event.target ?","answer":"<p>In simplest terms, the&nbsp;<strong>event.target</strong>&nbsp;is the element on which the event&nbsp;<strong>occurred</strong>&nbsp;or the element that&nbsp;<strong>triggered</strong>&nbsp;the event.</p>\n<p>Sample HTML Markup.</p>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">onclick=</span><span class=\"s\">\"clickFunc(event)\"</span> <span class=\"na\">style=</span><span class=\"s\">\"text-align: center;margin:15px;\nborder:1px solid red;border-radius:3px;\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"margin: 25px; border:1px solid royalblue;border-radius:3px;\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"margin:25px;border:1px solid skyblue;border-radius:3px;\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;button</span> <span class=\"na\">style=</span><span class=\"s\">\"margin:10px\"</span><span class=\"nt\">&gt;</span>\n             Button\n          <span class=\"nt\">&lt;/button&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div>\n<p>Sample JavaScript.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code> <span class=\"kd\">function</span> <span class=\"nx\">clickFunc</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>If you click the button it will log the&nbsp;<strong>button</strong>&nbsp;markup even though we attach the event on the outermost&nbsp;<code>div</code>&nbsp;it will always log the&nbsp;<strong>button</strong>&nbsp;so we can conclude that the&nbsp;<strong>event.target</strong>&nbsp;is the element that triggered the event.</p>","categories":[{"name":"Code","id":2}],"id":12},{"question":"What is event.currentTarget?","answer":"<p>The&nbsp;<strong>event.currentTarget</strong>&nbsp;is the element on which we attach the event handler&nbsp;<strong>explicitly</strong>.</p>\n<p>Copying the markup in&nbsp;<strong>Question 12</strong>.<br />Sample HTML Markup.</p>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">onclick=</span><span class=\"s\">\"clickFunc(event)\"</span> <span class=\"na\">style=</span><span class=\"s\">\"text-align: center;margin:15px;\nborder:1px solid red;border-radius:3px;\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"margin: 25px; border:1px solid royalblue;border-radius:3px;\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"margin:25px;border:1px solid skyblue;border-radius:3px;\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;button</span> <span class=\"na\">style=</span><span class=\"s\">\"margin:10px\"</span><span class=\"nt\">&gt;</span>\n             Button\n          <span class=\"nt\">&lt;/button&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div>\n<p>And changing our the&nbsp;<strong>JS</strong>&nbsp;a little bit.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">clickFunc</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>If you click the button it will log the outermost&nbsp;<strong>div</strong>&nbsp;markup even though we click the button. In this example, we can conclude that the&nbsp;<strong>event.currentTarget</strong>&nbsp;is the element on which we attach the event handler.</p>","categories":[{"name":"Code","id":2}],"id":13},{"question":"What's the difference between == and === ?","answer":"<p>The difference between&nbsp;<code>==</code><strong>(abstract equality)</strong>&nbsp;and&nbsp;<code>===</code><strong>(strict equality)</strong>&nbsp;is that the&nbsp;<code>==</code>&nbsp;compares by&nbsp;<strong>value</strong>&nbsp;after&nbsp;<em>coercion</em>&nbsp;and&nbsp;<code>===</code>&nbsp;compares by&nbsp;<strong>value</strong>&nbsp;and&nbsp;<strong>type</strong>&nbsp;without&nbsp;<em>coercion</em>.</p>\n<p>Let's dig deeper on the&nbsp;<code>==</code>. So first let's talk about&nbsp;<em>coercion</em>.</p>\n<p><em>coercion</em>&nbsp;is the process of converting a value to another type. As in this case, the&nbsp;<code>==</code>&nbsp;does&nbsp;<em>implicit coercion</em>. The&nbsp;<code>==</code>&nbsp;has some conditions to perform before comparing the two values.</p>\n<p>Suppose we have to compare&nbsp;<code>x == y</code>&nbsp;values.</p>\n<ol>\n<li>If&nbsp;<code>x</code>&nbsp;and&nbsp;<code>y</code>&nbsp;have same type. Then compare them with the&nbsp;<code>===</code>&nbsp;operator.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is&nbsp;<code>null</code>&nbsp;and&nbsp;<code>y</code>&nbsp;is&nbsp;<code>undefined</code>&nbsp;then return&nbsp;<code>true</code>.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is&nbsp;<code>undefined</code>&nbsp;and&nbsp;<code>y</code>&nbsp;is&nbsp;<code>null</code>&nbsp;then return&nbsp;<code>true</code>.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is type&nbsp;<code>number</code>&nbsp;and&nbsp;<code>y</code>&nbsp;is type&nbsp;<code>string</code>&nbsp;Then return&nbsp;<code>x == toNumber(y)</code>.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is type&nbsp;<code>string</code>&nbsp;and&nbsp;<code>y</code>&nbsp;is type&nbsp;<code>number</code>&nbsp;Then return&nbsp;<code>toNumber(x) == y</code>.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is type&nbsp;<code>boolean</code>&nbsp;Then return&nbsp;<code>toNumber(x) == y</code>.</li>\n<li>If&nbsp;<code>y</code>&nbsp;is type&nbsp;<code>boolean</code>&nbsp;Then return&nbsp;<code>x == toNumber(y)</code>.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is either&nbsp;<code>string</code>,<code>symbol</code>&nbsp;or&nbsp;<code>number</code>&nbsp;and&nbsp;<code>y</code>&nbsp;is type&nbsp;<code>object</code>&nbsp;Then return&nbsp;<code>x == toPrimitive(y)</code>.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is either&nbsp;<code>object</code>&nbsp;and&nbsp;<code>x</code>&nbsp;is either&nbsp;<code>string</code>,<code>symbol</code>&nbsp;Then return&nbsp;<code>toPrimitive(x) == y</code>.</li>\n<li>Return&nbsp;<code>false</code>.</li>\n</ol>\n<p><strong>Note:</strong>&nbsp;<code>toPrimitive</code>&nbsp;uses first the&nbsp;<code>valueOf</code>&nbsp;method then the&nbsp;<code>toString</code>&nbsp;method in objects to get the primitive value of that object.</p>\n<p>Let's have examples.</p>\n<div class=\"table-wrapper-paragraph\">\n<table>\n<thead>\n<tr>\n<th><code>x</code></th>\n<th><code>y</code></th>\n<th><code>x == y</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>5</code></td>\n<td><code>5</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>1</code></td>\n<td><code>'1'</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>null</code></td>\n<td><code>undefined</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>0</code></td>\n<td><code>false</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>'1,2'</code></td>\n<td><code>[1,2]</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>'[object Object]'</code></td>\n<td><code>{}</code></td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>These examples all return&nbsp;<code>true</code>.</p>\n<p>The&nbsp;<strong>first example</strong>&nbsp;goes to&nbsp;<strong>condition one</strong>&nbsp;because&nbsp;<code>x</code>&nbsp;and&nbsp;<code>y</code>&nbsp;have the same type and value.</p>\n<p>The&nbsp;<strong>second example</strong>&nbsp;goes to&nbsp;<strong>condition four</strong>&nbsp;<code>y</code>&nbsp;is converted to a&nbsp;<code>number</code>&nbsp;before comparing.</p>\n<p>The&nbsp;<strong>third example</strong>&nbsp;goes to&nbsp;<strong>condition two</strong>.</p>\n<p>The&nbsp;<strong>fourth example</strong>&nbsp;goes to&nbsp;<strong>condition seven</strong>&nbsp;because&nbsp;<code>y</code>&nbsp;is&nbsp;<code>boolean</code>.</p>\n<p>The&nbsp;<strong>fifth example</strong>&nbsp;goes to&nbsp;<strong>condition eight</strong>. The array is converted to a&nbsp;<code>string</code>&nbsp;using the&nbsp;<code>toString()</code>&nbsp;method which returns&nbsp;<code>1,2</code>.</p>\n<p>The&nbsp;<strong>last example</strong>&nbsp;goes to&nbsp;<strong>condition ten</strong>. The object is converted to a&nbsp;<code>string</code>&nbsp;using the&nbsp;<code>toString()</code>&nbsp;method which returns&nbsp;<code>[object Object]</code>.</p>\n<div class=\"table-wrapper-paragraph\">\n<table>\n<thead>\n<tr>\n<th><code>x</code></th>\n<th><code>y</code></th>\n<th><code>x === y</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>5</code></td>\n<td><code>5</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>1</code></td>\n<td><code>'1'</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>null</code></td>\n<td><code>undefined</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>0</code></td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>'1,2'</code></td>\n<td><code>[1,2]</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>'[object Object]'</code></td>\n<td><code>{}</code></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>If we use the&nbsp;<code>===</code>&nbsp;operator all the comparisons except for the first example will return&nbsp;<code>false</code>&nbsp;because they don't have the same type while the first example will return&nbsp;<code>true</code>&nbsp;because the two have the same type and value.</p>","categories":[{"name":"Code","id":2}],"id":14},{"question":"Why does it return false when comparing two similar objects in JavaScript?","answer":"<p>Suppose we have an example below.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n<span class=\"kd\">let</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n<span class=\"kd\">let</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">a</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">===</span> <span class=\"nx\">b</span><span class=\"p\">);</span> <span class=\"c1\">// logs false even though they have the same property</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">===</span> <span class=\"nx\">c</span><span class=\"p\">);</span> <span class=\"c1\">// logs true hmm</span>\n</code></pre>\n</div>\n<p><strong>JavaScript</strong>&nbsp;compares&nbsp;<em>objects</em>&nbsp;and&nbsp;<em>primitives</em>&nbsp;differently. In&nbsp;<em>primitives</em>&nbsp;it compares them by&nbsp;<strong>value</strong>&nbsp;while in&nbsp;<em>objects</em>&nbsp;it compares them by&nbsp;<strong>reference</strong>&nbsp;or the&nbsp;<strong>address in memory where the variable is stored</strong>. That's why the first&nbsp;<code>console.log</code>&nbsp;statement returns&nbsp;<code>false</code>&nbsp;and the second&nbsp;<code>console.log</code>&nbsp;statement returns&nbsp;<code>true</code>.&nbsp;<code>a</code>&nbsp;and&nbsp;<code>c</code>&nbsp;have the same reference and&nbsp;<code>a</code>&nbsp;and&nbsp;<code>b</code>&nbsp;are not.</p>","categories":[{"name":"Code","id":2}],"id":15},{"question":"What does the !! operator do?","answer":"<p>The&nbsp;<strong>Double NOT</strong>&nbsp;operator or&nbsp;<strong>!!</strong>&nbsp;coerces the value on the right side into a boolean. basically it's a fancy way of converting a value into a boolean.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"kc\">null</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"kc\">undefined</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"dl\">''</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"kc\">NaN</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"dl\">'</span> <span class=\"dl\">'</span><span class=\"p\">);</span> <span class=\"c1\">//logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"p\">{});</span> <span class=\"c1\">//logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"p\">[]);</span> <span class=\"c1\">//logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">//logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"p\">[].</span><span class=\"nx\">length</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":16},{"question":"How to evaluate multiple expressions in one line?","answer":"<p>We can use the&nbsp;<code>,</code>&nbsp;or comma operator to evaluate multiple expressions in one line. It evaluates from left-to-right and returns the value of the last item on the right or the last operand.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n\n<span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"o\">++</span> <span class=\"p\">,</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">addFive</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">),</span> <span class=\"nx\">x</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nx\">x</span> <span class=\"o\">-=</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"nx\">x</span> <span class=\"o\">+=</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">addFive</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">num</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>If you log the value of&nbsp;<code>x</code>&nbsp;it would be&nbsp;<strong>27</strong>. First, we&nbsp;<strong>increment</strong>&nbsp;the value of x it would be&nbsp;<strong>6</strong>, then we invoke the function&nbsp;<code>addFive(6)</code>&nbsp;and pass the 6 as a parameter and assign the result to&nbsp;<code>x</code>&nbsp;the new value of&nbsp;<code>x</code>&nbsp;would be&nbsp;<strong>11</strong>. After that, we multiply the current value of&nbsp;<code>x</code>&nbsp;to&nbsp;<strong>2</strong>&nbsp;and assign it to&nbsp;<code>x</code>&nbsp;the updated value of&nbsp;<code>x</code>&nbsp;would be&nbsp;<strong>22</strong>. Then, we subtract the current value of&nbsp;<code>x</code>&nbsp;to 5 and assign the result to&nbsp;<code>x</code>&nbsp;the updated value would be&nbsp;<strong>17</strong>. And lastly, we increment the value of&nbsp;<code>x</code>&nbsp;by 10 and assign the updated value to&nbsp;<code>x</code>&nbsp;now the value of&nbsp;<code>x</code>&nbsp;would be&nbsp;<strong>27</strong>.</p>","categories":[{"name":"Code","id":2}],"id":17},{"question":"What is Hoisting?","answer":"<p><strong>Hoisting</strong>&nbsp;is the term used to describe the moving of&nbsp;<em>variables</em>&nbsp;and&nbsp;<em>functions</em>&nbsp;to the top of their&nbsp;<em>(global or function)</em>&nbsp;scope on where we define that variable or function.</p>\n<p>Ok to understand&nbsp;<strong>Hoisting</strong>, I have to explain the&nbsp;<em>execution context</em>.<br />The&nbsp;<strong>Execution Context</strong>&nbsp;is the \"environment of code\" that is currently executing. The&nbsp;<strong>Execution Context</strong>&nbsp;has two phases&nbsp;<em>compilation</em>&nbsp;and&nbsp;<em>execution</em>.</p>\n<p><strong>Compilation</strong>&nbsp;- in this phase it gets all the&nbsp;<em>function declarations</em>&nbsp;and&nbsp;<em>hoists</em>&nbsp;them up to the top of their scope so we can reference them later and gets all&nbsp;<em>variables declaration</em>&nbsp;<strong>(declare with the var keyword)</strong>&nbsp;and also&nbsp;<em>hoists</em>&nbsp;them up and give them a default value of&nbsp;<em>undefined</em>.</p>\n<p><strong>Execution</strong>&nbsp;- in this phase it assigns values to the variables&nbsp;<em>hoisted</em>&nbsp;earlier and it&nbsp;<em>executes</em>&nbsp;or&nbsp;<em>invokes</em>&nbsp;functions&nbsp;<strong>(methods in objects)</strong>.</p>\n<p><strong>Note:</strong>&nbsp;only&nbsp;<strong>function declarations</strong>&nbsp;and variables declared with the&nbsp;<em>var</em>&nbsp;keyword are&nbsp;<em>hoisted</em>&nbsp;not&nbsp;<strong>function expressions</strong>&nbsp;or&nbsp;<strong>arrow functions</strong>,&nbsp;<code>let</code>&nbsp;and&nbsp;<code>const</code>&nbsp;keywords.</p>\n<p>Ok, suppose we have an example code in the&nbsp;<em>global scope</em>&nbsp;below.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Mark</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">){</span>\n  <span class=\"k\">return</span> <span class=\"dl\">'</span><span class=\"s1\">Hello </span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">!</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<p>This code logs&nbsp;<code>undefined</code>,<code>1</code>,&nbsp;<code>Hello Mark!</code>&nbsp;respectively.</p>\n<p>So the&nbsp;<em>compilation</em>&nbsp;phase would look like this.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"dl\">'</span><span class=\"s1\">Hello </span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">!</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">y</span><span class=\"p\">;</span> <span class=\"c1\">//implicit \"undefined\" assignment</span>\n\n<span class=\"c1\">//waiting for \"compilation\" phase to finish</span>\n\n<span class=\"c1\">//then start \"execution\" phase</span>\n<span class=\"cm\">/*\nconsole.log(y);\ny = 1;\nconsole.log(y);\nconsole.log(greet(\"Mark\"));\n*/</span>\n\n</code></pre>\n</div>\n<p>for example purposes, I commented on the&nbsp;<em>assignment</em>&nbsp;of variable and&nbsp;<em>function call</em>.</p>\n<p>After the&nbsp;<em>compilation</em>&nbsp;phase finishes it starts the&nbsp;<em>execution</em>&nbsp;phase invoking methods and assigns values to variables.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"dl\">'</span><span class=\"s1\">Hello </span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">!</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n\n<span class=\"c1\">//start \"execution\" phase</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Mark</span><span class=\"dl\">\"</span><span class=\"p\">));</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":18},{"question":"What is Scope?","answer":"<p><strong>Scope</strong>&nbsp;in JavaScript is the&nbsp;<strong>area</strong>&nbsp;where we have valid access to variables or functions. JavaScript has three types of Scopes.&nbsp;<strong>Global Scope</strong>,&nbsp;<strong>Function Scope</strong>, and&nbsp;<strong>Block Scope(ES6)</strong>.</p>\n<ul>\n<li><strong>Global Scope</strong>&nbsp;- variables or functions declared in the global namespace are in the global scope and therefore is accessible everywhere in our code.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"c1\">//global namespace</span>\n   <span class=\"kd\">var</span> <span class=\"nx\">g</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">global</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n   <span class=\"kd\">function</span> <span class=\"nx\">globalFunc</span><span class=\"p\">(){</span>\n     <span class=\"kd\">function</span> <span class=\"nx\">innerFunc</span><span class=\"p\">(){</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">g</span><span class=\"p\">);</span> <span class=\"c1\">// can access \"g\" because \"g\" is a global variable</span>\n     <span class=\"p\">}</span>\n     <span class=\"nx\">innerFunc</span><span class=\"p\">();</span>\n   <span class=\"p\">}</span>  \n</code></pre>\n</div>\n<ul>\n<li><strong>Function Scope</strong>&nbsp;- variables,functions and parameters declared within a function are accessible inside that function but not outside of it.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>    <span class=\"kd\">function</span> <span class=\"nx\">myFavoriteFunc</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Hello </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">a</span><span class=\"p\">;</span>\n       <span class=\"p\">}</span>\n       <span class=\"k\">return</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"nx\">myFavoriteFunc</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">World</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// Throws a ReferenceError \"a\" is not defined</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span> <span class=\"c1\">// does not continue here </span>\n</code></pre>\n</div>\n<ul>\n<li><strong>Block Scope</strong>&nbsp;- variables&nbsp;<strong>(<code>let</code>,<code>const</code>)</strong>&nbsp;declared within a block&nbsp;<code>{}</code>&nbsp;can only be access within it.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code> <span class=\"kd\">function</span> <span class=\"nx\">testBlock</span><span class=\"p\">(){</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">){</span>\n     <span class=\"kd\">let</span> <span class=\"nx\">z</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"nx\">z</span><span class=\"p\">;</span> \n <span class=\"p\">}</span>\n\n <span class=\"nx\">testBlock</span><span class=\"p\">();</span> <span class=\"c1\">// Throws a ReferenceError \"z\" is not defined</span>\n</code></pre>\n</div>\n<p><strong>Scope</strong>&nbsp;is also a set of rules for finding variables. If a variable does not exist in the&nbsp;<strong>current scope</strong>&nbsp;it&nbsp;<strong>look ups</strong>&nbsp;and searches for a variable in the&nbsp;<strong>outer scope</strong>&nbsp;and if does not exist again it&nbsp;<strong>looks up</strong>&nbsp;again until it reaches the&nbsp;<strong>global scope</strong>&nbsp;if the variable exists then we can use it if not it throws an error. It searches for the&nbsp;<strong>nearest</strong>&nbsp;variable and it stops&nbsp;<strong>searching</strong>&nbsp;or&nbsp;<strong>looking up</strong>&nbsp;once it finds it. This is called&nbsp;<strong>Scope Chain</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"cm\">/* Scope Chain\n   Inside inner function perspective\n\n   inner's scope -&gt; outer's scope -&gt; global's scope\n  */</span>\n\n\n  <span class=\"c1\">//Global Scope</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">variable1</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Comrades</span><span class=\"dl\">\"</span><span class=\"p\">;</span>   \n  <span class=\"kd\">var</span> <span class=\"nx\">variable2</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Sayonara</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">outer</span><span class=\"p\">(){</span>\n  <span class=\"c1\">//outer's scope</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">variable1</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">World</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">inner</span><span class=\"p\">(){</span>\n    <span class=\"c1\">//inner's scope</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">variable2</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Hello</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">variable2</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span> <span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">variable1</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">inner</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>  \n  <span class=\"nx\">outer</span><span class=\"p\">();</span> \n<span class=\"c1\">// logs Hello World </span>\n<span class=\"c1\">// because (variable2 = \"Hello\") and (variable1 = \"World\") are the nearest </span>\n<span class=\"c1\">// variables inside inner's scope.</span>\n</code></pre>\n</div>\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dJFL2g1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/l81b3nmdonimex0qsgyr.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dJFL2g1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/l81b3nmdonimex0qsgyr.png\" alt=\"Scope\" loading=\"lazy\" /></a></p>","categories":[{"name":"Code","id":2}],"id":19},{"question":"What are Closures?","answer":"<p>This is probably the hardest question of all these questions because&nbsp;<strong>Closures</strong>&nbsp;is a controversial topic. So I'm gonna explain it from what I understand.</p>\n<p><strong>Closures</strong>&nbsp;is simply the ability of a function at the time of declaration to remember the references of variables and parameters on its current scope, on its parent function scope, on its parent's parent function scope until it reaches the global scope with the help of&nbsp;<strong>Scope Chain</strong>. Basically it is the&nbsp;<strong>Scope</strong>&nbsp;created when the function was declared.</p>\n<p>Examples are a great way to explain closures.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"c1\">//Global's Scope</span>\n   <span class=\"kd\">var</span> <span class=\"nx\">globalVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">abc</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n   <span class=\"kd\">function</span> <span class=\"nx\">a</span><span class=\"p\">(){</span>\n   <span class=\"c1\">//testClosures's Scope</span>\n     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">globalVar</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"nx\">a</span><span class=\"p\">();</span> <span class=\"c1\">//logs \"abc\" </span>\n   <span class=\"cm\">/* Scope Chain\n      Inside a function perspective\n\n      a's scope -&gt; global's scope  \n   */</span> \n</code></pre>\n</div>\n<p>In this example, when we declare the&nbsp;<code>a</code>&nbsp;function the&nbsp;<strong>Global Scope</strong>&nbsp;is part of&nbsp;<code>a's</code>&nbsp;<em>closure</em>.</p>\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gbH9Uqec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/teatokuw4xvgtlzbzhn8.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gbH9Uqec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/teatokuw4xvgtlzbzhn8.png\" alt=\"a's closure\" loading=\"lazy\" /></a></p>\n<p>The reason for the variable&nbsp;<code>globalVar</code>&nbsp;which does not have a value in the image because of the reason that the value of that variable can change based on&nbsp;<strong>where</strong>&nbsp;and&nbsp;<strong>when</strong>&nbsp;we invoke the&nbsp;<code>a</code>&nbsp;function.<br />But in our example above the&nbsp;<code>globalVar</code>&nbsp;variable will have the value of&nbsp;<strong>abc</strong>.</p>\n<p>Ok, let's have a complex example.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">globalVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">global</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">outerVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">outer</span><span class=\"dl\">\"</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">outerFunc</span><span class=\"p\">(</span><span class=\"nx\">outerParam</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">innerFunc</span><span class=\"p\">(</span><span class=\"nx\">innerParam</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">globalVar</span><span class=\"p\">,</span> <span class=\"nx\">outerParam</span><span class=\"p\">,</span> <span class=\"nx\">innerParam</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">innerFunc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">outerFunc</span><span class=\"p\">(</span><span class=\"nx\">outerVar</span><span class=\"p\">);</span>\n<span class=\"nx\">outerVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">outer-2</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">globalVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">guess</span><span class=\"dl\">\"</span>\n<span class=\"nx\">x</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">inner</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--inSFoNQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/e4hxm7zvz8eun2ppenwp.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--inSFoNQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/e4hxm7zvz8eun2ppenwp.png\" alt=\"Complex\" loading=\"lazy\" /></a><br />This will print \"guess outer inner\". The explanation for this is that when we invoke the&nbsp;<code>outerFunc</code>&nbsp;function and assigned the returned value the&nbsp;<code>innerFunc</code>&nbsp;function to the variable&nbsp;<code>x</code>, the&nbsp;<code>outerParam</code>&nbsp;will have a value of&nbsp;<strong>outer</strong>&nbsp;even though we assign a new value&nbsp;<strong>outer-2</strong>&nbsp;to the&nbsp;<code>outerVar</code>&nbsp;variable because<br />the reassignment happened after the invocation of the&nbsp;<code>outer</code>&nbsp;function and in that time when we invoke the&nbsp;<code>outerFunc</code>&nbsp;function it's look up the value of&nbsp;<code>outerVar</code>&nbsp;in the&nbsp;<strong>Scope Chain</strong>, the&nbsp;<code>outerVar</code>&nbsp;will have a value of&nbsp;<strong>\"outer\"</strong>. Now, when we invoke the&nbsp;<code>x</code>&nbsp;variable which have a reference to the&nbsp;<code>innerFunc</code>, the<br /><code>innerParam</code>&nbsp;will have a value of&nbsp;<strong>inner</strong>&nbsp;because thats the value we pass in the invocation and the&nbsp;<code>globalVar</code>&nbsp;variable will have a value of&nbsp;<strong>guess</strong>&nbsp;because before the invocation of the&nbsp;<code>x</code>&nbsp;variable we assign a new value to the&nbsp;<code>globalVar</code>&nbsp;and at the time of invocation&nbsp;<code>x</code>&nbsp;the value of&nbsp;<code>globalVar</code>&nbsp;in the_<em>Scope Chain</em>_ is<br /><strong>guess</strong>.</p>\n<p>We have an example that demonstrates a problem of not understanding closure correctly.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">arrFuncs</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n  <span class=\"nx\">arrFuncs</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">);</span> <span class=\"c1\">// i is 5</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">arrFuncs</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">arrFuncs</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]());</span> <span class=\"c1\">// all logs \"5\"</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>This code is not working as we expected because of&nbsp;<strong>Closures</strong>.<br />The&nbsp;<code>var</code>&nbsp;keyword makes a global variable and when we push a function<br />we return the global variable&nbsp;<code>i</code>. So when we call one of those functions in that array after the loop it logs&nbsp;<code>5</code>&nbsp;because we get<br />the current value of&nbsp;<code>i</code>&nbsp;which is&nbsp;<code>5</code>&nbsp;and we can access it because it's a global variable. Because&nbsp;<strong>Closures</strong>&nbsp;keeps the&nbsp;<strong>references</strong>&nbsp;of that variable not its&nbsp;<strong>values</strong>&nbsp;at the time of it's creation. We can solve this using&nbsp;<strong>IIFES</strong>&nbsp;or changing the&nbsp;<code>var</code>&nbsp;keyword to&nbsp;<code>let</code>&nbsp;for block-scoping.</p>","categories":[{"name":"Code","id":2}],"id":20},{"question":"What are the falsy values in JavaScript?","answer":"<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code> <span class=\"kd\">const</span> <span class=\"nx\">falsyValues</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">''</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"kc\">NaN</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">];</span>\n</code></pre>\n</div>\n<p><strong>falsy</strong>&nbsp;values are values that when converted to boolean becomes&nbsp;<strong>false</strong>.</p>","categories":[{"name":"Code","id":2}],"id":21},{"question":"How to check if a value is falsy?","answer":"<p>Use the&nbsp;<strong>Boolean</strong> function or the Double NOT operator !!</p>","categories":[{"name":"Code","id":2}],"id":22},{"question":"What does \"use strict\" do?","answer":"<p><code>\"use strict\"</code>&nbsp;is a ES5 feature in&nbsp;<strong>JavaScript</strong>&nbsp;that makes our code in&nbsp;<strong>Strict Mode</strong>&nbsp;in&nbsp;<em>functions</em>&nbsp;or&nbsp;<em>entire scripts</em>.&nbsp;<strong>Strict Mode</strong>&nbsp;helps us avoid&nbsp;<strong>bugs</strong>&nbsp;early on in our code and adds restrictions to it.</p>\n<p>Restrictions that&nbsp;<strong>Strict Mode</strong>&nbsp;gives us.</p>\n<ul>\n<li>Assigning or Accessing a variable that is not declared.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code> <span class=\"kd\">function</span> <span class=\"nx\">returnY</span><span class=\"p\">(){</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n    <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</code></pre>\n</div>\n<ul>\n<li>Assigning a value to a read-only or non-writable global variable;</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n   <span class=\"kd\">var</span> <span class=\"kc\">NaN</span> <span class=\"o\">=</span> <span class=\"kc\">NaN</span><span class=\"p\">;</span>\n   <span class=\"kd\">var</span> <span class=\"kc\">undefined</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n   <span class=\"kd\">var</span> <span class=\"kc\">Infinity</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">and beyond</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<ul>\n<li>Deleting an undeletable property.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n   <span class=\"kd\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n\n   <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">x</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">value</span> <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">1</span><span class=\"dl\">'</span>\n   <span class=\"p\">});</span>  \n\n   <span class=\"k\">delete</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">x</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<ul>\n<li>Duplicate parameter names.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n   <span class=\"kd\">function</span> <span class=\"nx\">someFunc</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">){</span>\n\n   <span class=\"p\">}</span>\n</code></pre>\n</div>\n<ul>\n<li>Creating variables with the use of the&nbsp;<strong>eval</strong>&nbsp;function.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code> <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">var x = 1;</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">);</span> <span class=\"c1\">//Throws a Reference Error x is not defined</span>\n\n</code></pre>\n</div>\n<ul>\n<li>The default value of&nbsp;<strong>this</strong>&nbsp;will be&nbsp;<code>undefined</code>.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">showMeThis</span><span class=\"p\">(){</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">showMeThis</span><span class=\"p\">();</span> <span class=\"c1\">//returns undefined</span>\n</code></pre>\n</div>\n<p>There are many more restrictions in&nbsp;<strong>Strict Mode</strong>&nbsp;than these.</p>","categories":[{"name":"Code","id":2}],"id":23},{"question":"What's the value of this in JavaScript?","answer":"<p>Basically,&nbsp;<code>this</code>&nbsp;refers to the value of the object that is currently executing or invoking the function. I say&nbsp;<strong>currently</strong>&nbsp;due to the reason that the value of&nbsp;<strong>this</strong>&nbsp;changes depending on the context on which we use it and where we use it.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"kd\">const</span> <span class=\"nx\">carDetails</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Ford Mustang</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n     <span class=\"na\">yearBought</span><span class=\"p\">:</span> <span class=\"mi\">2005</span><span class=\"p\">,</span>\n     <span class=\"nx\">getName</span><span class=\"p\">(){</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n     <span class=\"p\">},</span>\n     <span class=\"na\">isRegistered</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n   <span class=\"p\">};</span>\n\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">carDetails</span><span class=\"p\">.</span><span class=\"nx\">getName</span><span class=\"p\">());</span> <span class=\"c1\">// logs Ford Mustang</span>\n</code></pre>\n</div>\n<p>This is what we would normally expect because in the&nbsp;<strong>getName</strong>&nbsp;method we return&nbsp;<code>this.name</code>,&nbsp;<code>this</code>&nbsp;in this context refers to the object which is the&nbsp;<code>carDetails</code>&nbsp;object that is currently the \"owner\" object of the function executing.</p>\n<p>Ok, Let's some add some code to make it weird. Below the&nbsp;<code>console.log</code>&nbsp;statement add this three lines of code</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Ford Ranger</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n   <span class=\"kd\">var</span> <span class=\"nx\">getCarName</span> <span class=\"o\">=</span> <span class=\"nx\">carDetails</span><span class=\"p\">.</span><span class=\"nx\">getName</span><span class=\"p\">;</span>\n\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">getCarName</span><span class=\"p\">());</span> <span class=\"c1\">// logs Ford Ranger</span>\n</code></pre>\n</div>\n<p>The second&nbsp;<code>console.log</code>&nbsp;statement prints the word&nbsp;<strong>Ford Ranger</strong>&nbsp;which is weird because in our first&nbsp;<code>console.log</code>&nbsp;statement it printed&nbsp;<strong>Ford Mustang</strong>. The reason to this is that the&nbsp;<code>getCarName</code>&nbsp;method has a different \"owner\" object that is the&nbsp;<code>window</code>&nbsp;object. Declaring variables with the&nbsp;<code>var</code>&nbsp;keyword in the global scope attaches properties in the&nbsp;<code>window</code>&nbsp;object with the same name as the variables. Remember&nbsp;<code>this</code>&nbsp;in the global scope refers to the&nbsp;<code>window</code>&nbsp;object when&nbsp;<code>\"use strict\"</code>&nbsp;is not used.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">getCarName</span> <span class=\"o\">===</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">getCarName</span><span class=\"p\">);</span> <span class=\"c1\">//logs true</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">getCarName</span> <span class=\"o\">===</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCarName</span><span class=\"p\">);</span> <span class=\"c1\">// logs true</span>\n</code></pre>\n</div>\n<p><code>this</code>&nbsp;and&nbsp;<code>window</code>&nbsp;in this example refer to the same object.</p>\n<p>One way of solving this problem is by using the&nbsp;<code>apply</code>&nbsp;and&nbsp;<code>call</code>&nbsp;methods in functions.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">getCarName</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">carDetails</span><span class=\"p\">));</span> <span class=\"c1\">//logs Ford Mustang</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">getCarName</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">carDetails</span><span class=\"p\">));</span>  <span class=\"c1\">//logs Ford Mustang</span>\n</code></pre>\n</div>\n<p>The&nbsp;<code>apply</code>&nbsp;and&nbsp;<code>call</code>&nbsp;methods expects the first parameter to be an object which would be value of&nbsp;<code>this</code>&nbsp;inside that function.</p>\n<p><strong>IIFE</strong>&nbsp;or&nbsp;<strong>Immediately Invoked Function Expression</strong>, Functions that are declared in the global scope,&nbsp;<strong>Anonymous Functions</strong>&nbsp;and Inner functions in methods inside an object has a default of&nbsp;<strong>this</strong>&nbsp;which points to the&nbsp;<strong>window</strong>&nbsp;object.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(){</span>\n     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n   <span class=\"p\">})();</span> <span class=\"c1\">//logs the \"window\" object</span>\n\n   <span class=\"kd\">function</span> <span class=\"nx\">iHateThis</span><span class=\"p\">(){</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"nx\">iHateThis</span><span class=\"p\">();</span> <span class=\"c1\">//logs the \"window\" object  </span>\n\n   <span class=\"kd\">const</span> <span class=\"nx\">myFavoriteObj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     <span class=\"nx\">guessThis</span><span class=\"p\">(){</span>\n        <span class=\"kd\">function</span> <span class=\"nx\">getThis</span><span class=\"p\">(){</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">getThis</span><span class=\"p\">();</span>\n     <span class=\"p\">},</span>\n     <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Marko Polo</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n     <span class=\"nx\">thisIsAnnoying</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">){</span>\n       <span class=\"nx\">callback</span><span class=\"p\">();</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">};</span>\n\n\n   <span class=\"nx\">myFavoriteObj</span><span class=\"p\">.</span><span class=\"nx\">guessThis</span><span class=\"p\">();</span> <span class=\"c1\">//logs the \"window\" object</span>\n   <span class=\"nx\">myFavoriteObj</span><span class=\"p\">.</span><span class=\"nx\">thisIsAnnoying</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(){</span>\n     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span> <span class=\"c1\">//logs the \"window\" object</span>\n   <span class=\"p\">});</span>\n</code></pre>\n</div>\n<p>If we want to get the value of the&nbsp;<code>name</code>&nbsp;property which is&nbsp;<strong>Marko Polo</strong>&nbsp;in the&nbsp;<code>myFavoriteObj</code>&nbsp;object there are two ways to solve this.</p>\n<p>First, we save the value of&nbsp;<code>this</code>&nbsp;in a variable.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"kd\">const</span> <span class=\"nx\">myFavoriteObj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     <span class=\"nx\">guessThis</span><span class=\"p\">(){</span>\n         <span class=\"kd\">const</span> <span class=\"nb\">self</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span> <span class=\"c1\">//saves the this value to the \"self\" variable</span>\n         <span class=\"kd\">function</span> <span class=\"nx\">getName</span><span class=\"p\">(){</span>\n           <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n         <span class=\"p\">}</span>\n         <span class=\"nx\">getName</span><span class=\"p\">();</span>\n     <span class=\"p\">},</span>\n     <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Marko Polo</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n     <span class=\"nx\">thisIsAnnoying</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">){</span>\n       <span class=\"nx\">callback</span><span class=\"p\">();</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">};</span>\n</code></pre>\n</div>\n<p>In this image we save the value of&nbsp;<code>this</code>&nbsp;which would be the&nbsp;<code>myFavoriteObj</code>&nbsp;object. So we can access it inside the&nbsp;<code>getName</code>&nbsp;inner function.</p>\n<p>Second, we use&nbsp;<strong>ES6 Arrow Functions</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"kd\">const</span> <span class=\"nx\">myFavoriteObj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     <span class=\"nx\">guessThis</span><span class=\"p\">(){</span>\n         <span class=\"kd\">const</span> <span class=\"nx\">getName</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> \n           <span class=\"c1\">//copies the value of \"this\" outside of this arrow function</span>\n           <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n         <span class=\"p\">}</span>\n         <span class=\"nx\">getName</span><span class=\"p\">();</span>\n     <span class=\"p\">},</span>\n     <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Marko Polo</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n     <span class=\"nx\">thisIsAnnoying</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">){</span>\n       <span class=\"nx\">callback</span><span class=\"p\">();</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">};</span>\n</code></pre>\n</div>\n<p>Arrow Functions does not have its own <code>this</code>. It copies the value of&nbsp;<code>this</code>&nbsp;of the enclosing lexical scope or in this example the value of&nbsp;<code>this</code>&nbsp;outside the&nbsp;<code>getName</code>&nbsp;inner function which would be the&nbsp;<code>myFavoriteObj</code>&nbsp;object. We can also determine the value of&nbsp;<code>this</code> on how the function is invoked.</p>","categories":[{"name":"Code","id":2}],"id":24},{"question":"What is the prototype of an object?","answer":"<p>A&nbsp;<code>prototype</code>&nbsp;in simplest terms is a&nbsp;<em>blueprint</em>&nbsp;of an object. It is used as a fallback for&nbsp;<strong>properties</strong>&nbsp;and&nbsp;<strong>methods</strong>&nbsp;if it does exist in the current object. It's the way to share properties and functionality between objects. It's the core concept around JavaScript's&nbsp;<strong>Prototypal Inheritance</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"kd\">const</span> <span class=\"nx\">o</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">o</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">());</span> <span class=\"c1\">// logs [object Object] </span>\n</code></pre>\n</div>\n<p>Even though the&nbsp;<code>o.toString</code>&nbsp;method does not exist in the&nbsp;<code>o</code>&nbsp;object it does not throw an error instead returns a string&nbsp;<code>[object Object]</code>. When a property does not exist in the object it looks into its&nbsp;<strong>prototype</strong>&nbsp;and if it still does not exist it looks into the&nbsp;<strong>prototype's prototype</strong>&nbsp;and so on until it finds a property with the same in the&nbsp;<strong>Prototype Chain</strong>. The end of the&nbsp;<strong>Prototype Chain</strong>&nbsp;is the&nbsp;<strong>Object.prototype</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">o</span><span class=\"p\">.</span><span class=\"nx\">toString</span> <span class=\"o\">===</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">);</span> <span class=\"c1\">// logs true</span>\n   <span class=\"c1\">// which means we we're looking up the Prototype Chain and it reached </span>\n   <span class=\"c1\">// the Object.prototype and used the \"toString\" method.</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":25},{"question":"What is an IIFE, what is the use of it?","answer":"<p>An&nbsp;<strong>IIFE</strong>&nbsp;or&nbsp;<strong>Immediately Invoked Function Expression</strong>&nbsp;is a function that is gonna get invoked or executed after its creation or declaration. The syntax for creating&nbsp;<strong>IIFE</strong>&nbsp;is that we wrap the&nbsp;<code>function (){}</code>&nbsp;inside a parentheses&nbsp;<code>()</code>&nbsp;or the&nbsp;<strong>Grouping Operator</strong>&nbsp;to treat the function as an expression and after that we invoke it with another parentheses&nbsp;<code>()</code>. So an&nbsp;<strong>IIFE</strong>&nbsp;looks like this&nbsp;<code>(function(){})()</code>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n<span class=\"p\">}());</span>\n\n<span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n\n<span class=\"p\">})();</span>\n\n<span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"nx\">named</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n<span class=\"p\">})();</span>\n\n<span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"p\">})();</span>\n\n<span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nb\">global</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n<span class=\"p\">})(</span><span class=\"nb\">window</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">utility</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"c1\">//utilities</span>\n   <span class=\"p\">};</span>\n<span class=\"p\">})();</span>\n</code></pre>\n</div>\n<p>These examples are all valid&nbsp;<strong>IIFE</strong>. The second to the last example shows we can pass arguments to an&nbsp;<strong>IIFE</strong>&nbsp;function. The last example shows that we can save the result of the&nbsp;<strong>IIFE</strong>&nbsp;to a variable so we can reference it later.</p>\n<p>The best use of&nbsp;<strong>IIFE</strong>&nbsp;is making initialization setup functionalities and to avoid&nbsp;<strong>naming collisions</strong>&nbsp;with other variables in the global scope or polluting the global namespace. Let's have an example.</p>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"https://cdnurl.com/somelibrary.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</code></pre>\n</div>\n<p>Suppose we have a link to a library&nbsp;<code>somelibrary.js</code>&nbsp;that exposes some global functions that we use can in our code but this library has two methods that we don't use&nbsp;<code>createGraph</code>&nbsp;and&nbsp;<code>drawGraph</code>&nbsp;because these methods have bugs in them. And we want to implement our own&nbsp;<code>createGraph</code>&nbsp;and&nbsp;<code>drawGraph</code>&nbsp;methods.</p>\n<ul>\n<li>One way of solving this is by changing the structure of our scripts.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"https://cdnurl.com/somelibrary.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n<span class=\"nt\">&lt;script&gt;</span>\n   <span class=\"kd\">function</span> <span class=\"nx\">createGraph</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// createGraph logic here</span>\n   <span class=\"p\">}</span>\n   <span class=\"kd\">function</span> <span class=\"nx\">drawGraph</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// drawGraph logic here</span>\n   <span class=\"p\">}</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</code></pre>\n</div>\n<p>When we use this solution we are overriding those two methods that the library gives us.</p>\n<ul>\n<li>Another way of solving this is by changing the name of our own helper functions.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"https://cdnurl.com/somelibrary.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n<span class=\"nt\">&lt;script&gt;</span>\n   <span class=\"kd\">function</span> <span class=\"nx\">myCreateGraph</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// createGraph logic here</span>\n   <span class=\"p\">}</span>\n   <span class=\"kd\">function</span> <span class=\"nx\">myDrawGraph</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// drawGraph logic here</span>\n   <span class=\"p\">}</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</code></pre>\n</div>\n<p>When we use this solution we will also change those function calls to the new function names.</p>\n<ul>\n<li>Another way is using an&nbsp;<strong>IIFE</strong>.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"https://cdnurl.com/somelibrary.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n<span class=\"nt\">&lt;script&gt;</span>\n   <span class=\"kd\">const</span> <span class=\"nx\">graphUtility</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"kd\">function</span> <span class=\"nx\">createGraph</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n         <span class=\"c1\">// createGraph logic here</span>\n      <span class=\"p\">}</span>\n      <span class=\"kd\">function</span> <span class=\"nx\">drawGraph</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n         <span class=\"c1\">// drawGraph logic here</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n         <span class=\"nx\">createGraph</span><span class=\"p\">,</span>\n         <span class=\"nx\">drawGraph</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">})();</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</code></pre>\n</div>\n<p>In this solution, we are making a utility variable that is the result of&nbsp;<strong>IIFE</strong>&nbsp;which returns an object that contains two methods&nbsp;<code>createGraph</code>&nbsp;and&nbsp;<code>drawGraph</code>.</p>\n<p>Another problem that&nbsp;<strong>IIFE</strong>&nbsp;solves is in this example.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">li</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.list-group &gt; li</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">li</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nx\">li</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">);</span>\n   <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>Suppose we have a&nbsp;<code>ul</code>&nbsp;element with a class of&nbsp;<strong>list-group</strong>&nbsp;and it has 5&nbsp;<code>li</code>&nbsp;child elements. And we want to&nbsp;<code>console.log</code>&nbsp;the value of&nbsp;<code>i</code>&nbsp;when we&nbsp;<strong>click</strong>&nbsp;an individual&nbsp;<code>li</code>&nbsp;element.<br />But the behavior we want in this code does not work. Instead, it logs&nbsp;<code>5</code>&nbsp;in any&nbsp;<strong>click</strong>&nbsp;on an&nbsp;<code>li</code>&nbsp;element. The problem we're having is due to how&nbsp;<strong>Closures</strong>&nbsp;work.&nbsp;<strong>Closures</strong>&nbsp;are simply the ability of functions to remember the references of variables on its current scope, on its parent function scope and in the global scope. When we declare variables using the&nbsp;<code>var</code>&nbsp;keyword in the global scope, obviously we are making a global variable&nbsp;<code>i</code>. So when we click an&nbsp;<code>li</code>&nbsp;element it logs&nbsp;<strong>5</strong>&nbsp;because that is the value of&nbsp;<code>i</code>&nbsp;when we reference it later in the callback function.</p>\n<ul>\n<li>One solution to this is an&nbsp;<strong>IIFE</strong>.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">li</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.list-group &gt; li</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">li</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">currentIndex</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">li</span><span class=\"p\">[</span><span class=\"nx\">currentIndex</span><span class=\"p\">].</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">currentIndex</span><span class=\"p\">);</span>\n      <span class=\"p\">})</span>\n   <span class=\"p\">})(</span><span class=\"nx\">i</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>This solution works because of the reason that the&nbsp;<strong>IIFE</strong>&nbsp;creates a new scope for every iteration and we capture the value of&nbsp;<code>i</code>&nbsp;and pass it into the&nbsp;<code>currentIndex</code>&nbsp;parameter so the value of&nbsp;<code>currentIndex</code>&nbsp;is different for every iteration when we invoke the&nbsp;<strong>IIFE</strong>.</p>","categories":[{"name":"Code","id":2}],"id":26},{"question":"What is the use Function.prototype.apply method?","answer":"<p>The&nbsp;<code>apply</code>&nbsp;invokes a function specifying the&nbsp;<code>this</code>&nbsp;or the \"owner\" object of that function on that time of invocation.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">details</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Hello World!</span><span class=\"dl\">'</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">getMessage</span><span class=\"p\">(){</span>\n  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">getMessage</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">details</span><span class=\"p\">);</span> <span class=\"c1\">// returns 'Hello World!'</span>\n</code></pre>\n</div>\n<p>This method works like&nbsp;<code>Function.prototype.call</code>&nbsp;the only difference is how we pass arguments. In&nbsp;<code>apply</code>&nbsp;we pass arguments as an array.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">person</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Marko Polo</span><span class=\"dl\">\"</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">greeting</span><span class=\"p\">(</span><span class=\"nx\">greetingMessage</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">greetingMessage</span><span class=\"p\">}</span> <span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">person</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">Hello</span><span class=\"dl\">'</span><span class=\"p\">]);</span> <span class=\"c1\">// returns \"Hello Marko Polo!\"</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":27},{"question":"What is the use Function.prototype.call method?","answer":"<p>The&nbsp;<code>call</code>&nbsp;invokes a function specifying the&nbsp;<code>this</code>&nbsp;or the \"owner\" object of that function on that time of invocation.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">details</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Hello World!</span><span class=\"dl\">'</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">getMessage</span><span class=\"p\">(){</span>\n  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">getMessage</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">details</span><span class=\"p\">);</span> <span class=\"c1\">// returns 'Hello World!'</span>\n</code></pre>\n</div>\n<p>This method works like&nbsp;<code>Function.prototype.apply</code>&nbsp;the only difference is how we pass arguments. In&nbsp;<code>call</code>&nbsp;we pass directly the arguments separating them with a comma&nbsp;<code>,</code>&nbsp;for every argument.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">person</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Marko Polo</span><span class=\"dl\">\"</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">greeting</span><span class=\"p\">(</span><span class=\"nx\">greetingMessage</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">greetingMessage</span><span class=\"p\">}</span> <span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">greeting</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">person</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">Hello</span><span class=\"dl\">'</span><span class=\"p\">);</span> <span class=\"c1\">// returns \"Hello Marko Polo!\"</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":28},{"question":"What's the difference between Function.prototype.apply and Function.prototype.call?","answer":"<p>The only difference between&nbsp;<code>apply</code>&nbsp;and&nbsp;<code>call</code>&nbsp;is how we pass the&nbsp;<strong>arguments</strong>&nbsp;in the function being called. In&nbsp;<code>apply</code>&nbsp;we pass the arguments as an&nbsp;<strong>array</strong>&nbsp;and in&nbsp;<code>call</code>&nbsp;we pass the arguments directly in the argument list.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">obj1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n <span class=\"na\">result</span><span class=\"p\">:</span><span class=\"mi\">0</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n <span class=\"na\">result</span><span class=\"p\">:</span><span class=\"mi\">0</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">reduceAdd</span><span class=\"p\">(){</span>\n   <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">arguments</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n     <span class=\"nx\">result</span> <span class=\"o\">+=</span> <span class=\"nx\">arguments</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">reduceAdd</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">obj1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]);</span> <span class=\"c1\">// returns 15</span>\n<span class=\"nx\">reduceAdd</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">obj2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">);</span> <span class=\"c1\">// returns 15</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":29},{"question":"What is the usage of Function.prototype.bind?","answer":"<p>The&nbsp;<code>bind</code>&nbsp;method returns a new function that is&nbsp;<em>bound</em><br />to a specific&nbsp;<code>this</code>&nbsp;value or the \"owner\" object, So we can use it later in our code. The&nbsp;<code>call</code>,<code>apply</code>&nbsp;methods invokes the function immediately instead of returning a new function like the&nbsp;<code>bind</code>&nbsp;method.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">MyComponent</span> <span class=\"kd\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n     <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">){</span>\n          <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">);</span> \n          <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n             <span class=\"na\">value</span> <span class=\"p\">:</span> <span class=\"dl\">\"\"</span>\n          <span class=\"p\">}</span>  \n          <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleChange</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleChange</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span> \n          <span class=\"c1\">// Binds the \"handleChange\" method to the \"MyComponent\" component</span>\n     <span class=\"p\">}</span>\n\n     <span class=\"nx\">handleChange</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">){</span>\n       <span class=\"c1\">//do something amazing here</span>\n     <span class=\"p\">}</span>\n\n     <span class=\"nx\">render</span><span class=\"p\">(){</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n              <span class=\"o\">&lt;&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">input</span> <span class=\"nx\">type</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">}</span>\n                        <span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">}</span>\n                     <span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleChange</span><span class=\"p\">}</span>                      \n                  <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>              <span class=\"o\">&lt;</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>        <span class=\"p\">)</span>\n     <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":30},{"question":"What is Functional Programming and what are the features of JavaScript that makes it a candidate as a functional language?","answer":"<p><strong>Functional Programming</strong>&nbsp;is a&nbsp;<strong>declarative</strong>&nbsp;programming paradigm or pattern on how we build our applications with&nbsp;<strong>functions</strong>&nbsp;using&nbsp;<strong>expressions</strong>&nbsp;that calculates a value without mutating or changing the arguments that are passed to it.</p>\n<p>JavaScript&nbsp;<strong>Array</strong>&nbsp;has&nbsp;<strong>map</strong>,&nbsp;<strong>filter</strong>,&nbsp;<strong>reduce</strong>&nbsp;methods which are the most famous functions in the functional programming world because of their usefulness and because they don't mutate or change the array which makes these functions&nbsp;<strong>pure</strong>&nbsp;and JavaScript supports&nbsp;<strong>Closures</strong>&nbsp;and&nbsp;<strong>Higher Order Functions</strong>&nbsp;which are a characteristic of a&nbsp;<strong>Functional Programming Language</strong>.</p>\n<ul>\n<li>The&nbsp;<strong>map</strong>&nbsp;method creates a new array with the results of calling a provided callback function on every element in the array.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Functional</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Procedural</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Object-Oriented</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">wordsLength</span> <span class=\"o\">=</span> <span class=\"nx\">words</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">word</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">word</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n<ul>\n<li>The&nbsp;<strong>filter</strong>&nbsp;method creates a new array with all elements that pass the test in the callback function.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Mark</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">isRegistered</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">},</span>\n  <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Mary</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">isRegistered</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">},</span>\n  <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Mae</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">isRegistered</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n<span class=\"p\">];</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">registeredUsers</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"nx\">user</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">isRegistered</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n<ul>\n<li>The&nbsp;<strong>reduce</strong>&nbsp;method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">strs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">I</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span> <span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">am</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span> <span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Iron</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span> <span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Man</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">strs</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">acc</span><span class=\"p\">,</span> <span class=\"nx\">currentStr</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">acc</span> <span class=\"o\">+</span> <span class=\"nx\">currentStr</span><span class=\"p\">,</span> <span class=\"dl\">\"\"</span><span class=\"p\">);</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":31},{"question":"What are Higher Order Functions?","answer":"<p><strong>Higher-Order Function</strong>&nbsp;are functions that can return a function or receive argument or arguments which have a value of a function.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">higherOrderFunction</span><span class=\"p\">(</span><span class=\"nx\">param</span><span class=\"p\">,</span><span class=\"nx\">callback</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"nx\">param</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":32},{"question":"Why are functions called First-class Objects?","answer":"<p><strong>Functions</strong>&nbsp;in JavaScript are&nbsp;<strong>First-class Objects</strong>&nbsp;because they are treated as any other value in the language. They can be assigned to&nbsp;<strong>variables</strong>, they can be&nbsp;<strong>properties of an object</strong>&nbsp;which are called&nbsp;<strong>methods</strong>, they can be an&nbsp;<strong>item in array</strong>, they can be&nbsp;<strong>passed as arguments to a function</strong>, and they can be&nbsp;<strong>returned as values of a function</strong>. The only difference between a function and any other value in&nbsp;<strong>JavaScript</strong>&nbsp;is that&nbsp;<strong>functions</strong>&nbsp;can be invoked or called.</p>","categories":[{"name":"Code","id":2}],"id":33},{"question":"Implement the Array.prototype.map method by hand.","answer":"<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"nx\">mapCallback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// First, we check if the parameters passed are right.</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">arr</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">||</span> <span class=\"k\">typeof</span> <span class=\"nx\">mapCallback</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">function</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span> \n    <span class=\"k\">return</span> <span class=\"p\">[];</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"c1\">// We're making a results array every time we call this function</span>\n    <span class=\"c1\">// because we don't want to mutate the original array.</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">arr</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">mapCallback</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">],</span> <span class=\"nx\">i</span><span class=\"p\">,</span> <span class=\"nx\">arr</span><span class=\"p\">));</span> \n      <span class=\"c1\">// push the result of the mapCallback in the 'result' array</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span> <span class=\"c1\">// return the result array</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>As the MDN description of the&nbsp;<code>Array.prototype.map</code>&nbsp;method.</p>\n<p><strong>The map() method creates a new array with the results of calling a provided function on every element in the calling array.</strong></p>","categories":[{"name":"Code","id":2}],"id":34},{"question":"Implement the Array.prototype.filter method by hand.","answer":"<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"nx\">filterCallback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// First, we check if the parameters passed are right.</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">arr</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">||</span> <span class=\"k\">typeof</span> <span class=\"nx\">filterCallback</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">function</span><span class=\"dl\">'</span><span class=\"p\">)</span> \n  <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">[];</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"c1\">// We're making a results array every time we call this function</span>\n    <span class=\"c1\">// because we don't want to mutate the original array.</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">arr</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// check if the return value of the filterCallback is true or \"truthy\"</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">filterCallback</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">],</span> <span class=\"nx\">i</span><span class=\"p\">,</span> <span class=\"nx\">arr</span><span class=\"p\">))</span> <span class=\"p\">{</span> \n      <span class=\"c1\">// push the current item in the 'result' array if the condition is true</span>\n        <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span> <span class=\"c1\">// return the result array</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>As the MDN description of the&nbsp;<code>Array.prototype.filter</code>&nbsp;method.</p>\n<p><strong>The filter() method creates a new array with all elements that pass the test implemented by the provided function.</strong></p>","categories":[{"name":"Code","id":2}],"id":35},{"question":"Implement the Array.prototype.reduce method by hand.","answer":"<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">reduce</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">,</span> <span class=\"nx\">reduceCallback</span><span class=\"p\">,</span> <span class=\"nx\">initialValue</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// First, we check if the parameters passed are right.</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">arr</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">arr</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">||</span> <span class=\"k\">typeof</span> <span class=\"nx\">reduceCallback</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">function</span><span class=\"dl\">'</span><span class=\"p\">)</span> \n  <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">[];</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// If no initialValue has been passed to the function we're gonna use the </span>\n    <span class=\"kd\">let</span> <span class=\"nx\">hasInitialValue</span> <span class=\"o\">=</span> <span class=\"nx\">initialValue</span> <span class=\"o\">!==</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">hasInitialValue</span> <span class=\"p\">?</span> <span class=\"nx\">initialValue</span> <span class=\"p\">:</span> <span class=\"nx\">arr</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"c1\">// first array item as the initialValue</span>\n\n    <span class=\"c1\">// Then we're gonna start looping at index 1 if there is no </span>\n    <span class=\"c1\">// initialValue has been passed to the function else we start at 0 if </span>\n    <span class=\"c1\">// there is an initialValue.</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"nx\">hasInitialValue</span> <span class=\"p\">?</span> <span class=\"mi\">0</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">arr</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// Then for every iteration we assign the result of the </span>\n      <span class=\"c1\">// reduceCallback to the variable value.</span>\n      <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">reduceCallback</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">arr</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">],</span> <span class=\"nx\">i</span><span class=\"p\">,</span> <span class=\"nx\">arr</span><span class=\"p\">);</span> \n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>As the MDN description of the&nbsp;<code>Array.prototype.reduce</code>&nbsp;method.</p>\n<p><strong>The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.</strong></p>","categories":[{"name":"Code","id":2}],"id":36},{"question":"What is the arguments object?","answer":"<p>The&nbsp;<strong>arguments</strong>&nbsp;object is a collection of parameter values pass in a function. It's an&nbsp;<strong>Array-like</strong>&nbsp;object because it has a&nbsp;<strong>length</strong>&nbsp;property and we can access individual values using array indexing notation&nbsp;<code>arguments[1]</code>&nbsp;but it does not have the built-in methods in an array&nbsp;<code>forEach</code>,<code>reduce</code>,<code>filter</code>&nbsp;and&nbsp;<code>map</code>.<br />It helps us know the number of arguments pass in a function.</p>\n<p>We can convert the&nbsp;<code>arguments</code>&nbsp;object into an array using the&nbsp;<code>Array.prototype.slice</code>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">one</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>Note:&nbsp;<strong>the&nbsp;<code>arguments</code>&nbsp;object does not work on ES6 arrow functions.</strong></p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">one</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">arguments</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">const</span> <span class=\"nx\">two</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">arguments</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">const</span> <span class=\"nx\">three</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"nx\">three</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">arguments</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">four</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">arguments</span><span class=\"p\">;</span>\n\n<span class=\"nx\">four</span><span class=\"p\">();</span> <span class=\"c1\">// Throws an error  - arguments is not defined</span>\n</code></pre>\n</div>\n<p>When we invoke the function&nbsp;<code>four</code>&nbsp;it throws a&nbsp;<code>ReferenceError: arguments is not defined</code>&nbsp;error. We can solve this problem if your envinroment supports the&nbsp;<strong>rest syntax</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">four</span> <span class=\"o\">=</span> <span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">args</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<p>This puts all parameter values in an array automatically.</p>","categories":[{"name":"Code","id":2}],"id":37},{"question":"How to create an object without a prototype?","answer":"<p>We can create an object without a&nbsp;<em>prototype</em>&nbsp;using the&nbsp;<code>Object.create</code>&nbsp;method.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"kd\">const</span> <span class=\"nx\">o1</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">o1</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">());</span> \n   <span class=\"c1\">// logs [object Object] get this method to the Object.prototype </span>\n\n   <span class=\"kd\">const</span> <span class=\"nx\">o2</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n   <span class=\"c1\">// the first parameter is the prototype of the object \"o2\" which in this</span>\n   <span class=\"c1\">// case will be null specifying we don't want any prototype</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">o2</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">());</span>\n   <span class=\"c1\">// throws an error o2.toString is not a function </span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":38},{"question":"Why does b in this code become a global variable when you call this function?","answer":"<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">myFunc</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">myFunc</span><span class=\"p\">();</span>\n</code></pre>\n</div>\n<p>The reason for this is that&nbsp;<strong>assignment operator</strong>&nbsp;or&nbsp;<strong>=</strong>&nbsp;has right-to-left&nbsp;<strong>associativity</strong>&nbsp;or&nbsp;<strong>evaluation</strong>. What this means is that when multiple assignment operators appear in a single expression they evaluated from right to left. So our code becomes likes this.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">myFunc</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">myFunc</span><span class=\"p\">();</span>\n</code></pre>\n</div>\n<p>First, the expression&nbsp;<code>b = 0</code>&nbsp;evaluated and in this example&nbsp;<code>b</code>&nbsp;is not declared. So, The JS Engine makes a global variable&nbsp;<code>b</code>&nbsp;outside this function after that the return value of the expression&nbsp;<code>b = 0</code>&nbsp;would be 0 and it's assigned to the new local variable&nbsp;<code>a</code>&nbsp;with a&nbsp;<code>let</code>&nbsp;keyword.</p>\n<p>We can solve this problem by declaring the variables first before assigning them with value.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">myFunc</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"nx\">b</span><span class=\"p\">;</span>\n  <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">myFunc</span><span class=\"p\">();</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":39},{"question":"What is ECMAScript?","answer":"<p><strong>ECMAScript</strong>&nbsp;is a standard for making scripting languages which means that&nbsp;<strong>JavaScript</strong>&nbsp;follows the specification changes in&nbsp;<strong>ECMAScript</strong>&nbsp;standard because it is the&nbsp;<strong>blueprint</strong>&nbsp;of&nbsp;<strong>JavaScript</strong>.</p>","categories":[{"name":"Code","id":2}],"id":40},{"question":"What are the new features in ES6 or ECMAScript 2015?","answer":"<ul>\n<li>\n<p>Arrow Functions</p>\n</li>\n<li>\n<p>Classes</p>\n</li>\n<li>\n<p>Template Strings</p>\n</li>\n<li>\n<p><strong>Enhanced Object literals</strong></p>\n</li>\n<li>\n<p>Object Destructuring</p>\n</li>\n<li>\n<p>Promises</p>\n</li>\n<li>\n<p><strong>Generators</strong></p>\n</li>\n<li>\n<p>Modules</p>\n</li>\n<li>\n<p>Symbol</p>\n</li>\n<li>\n<p><strong>Proxies</strong></p>\n</li>\n<li>\n<p>Sets</p>\n</li>\n<li>\n<p>Default Function parameters</p>\n</li>\n<li>\n<p>Rest and Spread</p>\n</li>\n<li>\n<p>Block Scoping with&nbsp;<code>let</code>&nbsp;and&nbsp;<code>const</code></p>\n</li>\n</ul>","categories":[{"name":"Code","id":2}],"id":41},{"question":"What's the difference between var, let and const keywords?","answer":"<p>Variables declared with&nbsp;<code>var</code>&nbsp;keyword are&nbsp;<em>function scoped</em>.<br />What this means that variables can be accessed across that function even if we declare that variable inside a block.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">giveMeX</span><span class=\"p\">(</span><span class=\"nx\">showX</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">showX</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">giveMeX</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">));</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">giveMeX</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">));</span>\n</code></pre>\n</div>\n<p>The first&nbsp;<code>console.log</code>&nbsp;statement logs&nbsp;<code>undefined</code><br />and the second&nbsp;<code>5</code>. We can access the&nbsp;<code>x</code>&nbsp;variable due<br />to the reason that it gets&nbsp;<em>hoisted</em>&nbsp;at the top of the function scope. So our function code is intepreted like this.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">giveMeX</span><span class=\"p\">(</span><span class=\"nx\">showX</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">x</span><span class=\"p\">;</span> <span class=\"c1\">// has a default value of undefined</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">showX</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>If you are wondering why it logs&nbsp;<code>undefined</code>&nbsp;in the first&nbsp;<code>console.log</code>&nbsp;statement remember variables declared without an initial value has a default value of&nbsp;<code>undefined</code>.</p>\n<p>Variables declared with&nbsp;<code>let</code>&nbsp;and&nbsp;<code>const</code>&nbsp;keyword are&nbsp;<em>block scoped</em>. What this means that variable can only be accessed on that block&nbsp;<code>{}</code>&nbsp;on where we declare it.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">giveMeX</span><span class=\"p\">(</span><span class=\"nx\">showX</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">showX</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kd\">function</span> <span class=\"nx\">giveMeY</span><span class=\"p\">(</span><span class=\"nx\">showY</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">showY</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>If we call this functions with an argument of&nbsp;<code>false</code>&nbsp;it throws a&nbsp;<code>Reference Error</code>&nbsp;because we can't access the&nbsp;<code>x</code>&nbsp;and&nbsp;<code>y</code>&nbsp;variables outside that block and those variables are not&nbsp;<em>hoisted</em>.</p>\n<p>There is also a difference between&nbsp;<code>let</code>&nbsp;and&nbsp;<code>const</code>&nbsp;we can assign new values using&nbsp;<code>let</code>&nbsp;but we can't in&nbsp;<code>const</code>&nbsp;but&nbsp;<code>const</code>&nbsp;are mutable meaning. What this means is if the value that we assign to a&nbsp;<code>const</code>&nbsp;is an object we can change the values of those properties but can't reassign a new value to that variable.</p>","categories":[{"name":"Code","id":2}],"id":42},{"question":"What are Arrow functions?","answer":"<p><strong>Arrow Functions</strong>&nbsp;are a new way of making functions in JavaScript.&nbsp;<strong>Arrow Functions</strong>&nbsp;takes a little time in making functions and has a cleaner syntax than a&nbsp;<strong>function expression</strong>&nbsp;because we omit the&nbsp;<code>function</code>&nbsp;keyword in making them.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">//ES5 Version</span>\n<span class=\"kd\">var</span> <span class=\"nx\">getCurrentDate</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(){</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//ES6 Version</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getCurrentDate</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n</code></pre>\n</div>\n<p>In this example, in the ES5 Version have&nbsp;<code>function(){}</code>&nbsp;declaration and&nbsp;<code>return</code>&nbsp;keyword needed to make a function and return a value respectively. In the&nbsp;<strong>Arrow Function</strong>&nbsp;version we only need the&nbsp;<code>()</code>&nbsp;parentheses and we don't need a&nbsp;<code>return</code>&nbsp;statement because&nbsp;<strong>Arrow Functions</strong>&nbsp;have a implicit return if we have only one expression or value to return.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">//ES5 Version</span>\n<span class=\"kd\">function</span> <span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"dl\">'</span><span class=\"s1\">Hello </span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">!</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//ES6 Version</span>\n<span class=\"kd\">const</span> <span class=\"nx\">greet</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">`Hello </span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">greet2</span> <span class=\"o\">=</span> <span class=\"nx\">name</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">`Hello </span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n\n</code></pre>\n</div>\n<p>We can also parameters in&nbsp;<strong>Arrow functions</strong>&nbsp;the same as the&nbsp;<strong>function expressions</strong>&nbsp;and&nbsp;<strong>function declarations</strong>. If we have one parameter in an&nbsp;<strong>Arrow Function</strong>&nbsp;we can omit the parentheses it is also valid.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">getArgs</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">arguments</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">getArgs2</span> <span class=\"o\">=</span> <span class=\"p\">(...</span><span class=\"nx\">rest</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">rest</span>\n</code></pre>\n</div>\n<p><strong>Arrow functions</strong>&nbsp;don't have access to the&nbsp;<code>arguments</code>&nbsp;object. So calling the first&nbsp;<code>getArgs</code>&nbsp;func will throw an Error. Instead we can use the&nbsp;<strong>rest parameters</strong>&nbsp;to get all the arguments passed in an arrow function.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">result</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n  <span class=\"na\">nums</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n  <span class=\"nx\">computeResult</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// \"this\" here refers to the \"data\" object</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">addAll</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// arrow functions \"copies\" the \"this\" value of </span>\n      <span class=\"c1\">// the lexical enclosing function</span>\n      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">nums</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">total</span><span class=\"p\">,</span> <span class=\"nx\">cur</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">total</span> <span class=\"o\">+</span> <span class=\"nx\">cur</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">};</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">addAll</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n</div>\n<p><strong>Arrow functions</strong>&nbsp;don't have their own&nbsp;<code>this</code>&nbsp;value. It captures or gets the&nbsp;<code>this</code>&nbsp;value of lexically enclosing function or in this example, the&nbsp;<code>addAll</code>&nbsp;function copies the&nbsp;<code>this</code>&nbsp;value of the&nbsp;<code>computeResult</code>&nbsp;method and if we declare an arrow function in the global scope the value of&nbsp;<code>this</code>&nbsp;would be the&nbsp;<code>window</code>&nbsp;object.</p>","categories":[{"name":"Code","id":2}],"id":43},{"question":"What are Classes?","answer":"<p><strong>Classes</strong>&nbsp;is the new way of writing&nbsp;<em>constructor functions</em>&nbsp;in&nbsp;<strong>JavaScript</strong>. It is&nbsp;<em>syntactic sugar</em>&nbsp;for using&nbsp;<em>constructor functions</em>, it still uses&nbsp;<strong>prototypes</strong>&nbsp;and&nbsp;<strong>Prototype-Based Inheritance</strong>&nbsp;under the hood.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"c1\">//ES5 Version</span>\n   <span class=\"kd\">function</span> <span class=\"nx\">Person</span><span class=\"p\">(</span><span class=\"nx\">firstName</span><span class=\"p\">,</span> <span class=\"nx\">lastName</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"p\">,</span> <span class=\"nx\">address</span><span class=\"p\">){</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"nx\">firstName</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lastName</span> <span class=\"o\">=</span> <span class=\"nx\">lastName</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"nx\">age</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">address</span> <span class=\"o\">=</span> <span class=\"nx\">address</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"nx\">Person</span><span class=\"p\">.</span><span class=\"nb\">self</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n     <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"nx\">Person</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">toString</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n     <span class=\"k\">return</span> <span class=\"dl\">\"</span><span class=\"s2\">[object Person]</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"nx\">Person</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">getFullName</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(){</span>\n     <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">firstName</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span> <span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lastName</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>  \n\n   <span class=\"c1\">//ES6 Version</span>\n   <span class=\"kd\">class</span> <span class=\"nx\">Person</span> <span class=\"p\">{</span>\n        <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">firstName</span><span class=\"p\">,</span> <span class=\"nx\">lastName</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"p\">,</span> <span class=\"nx\">address</span><span class=\"p\">){</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lastName</span> <span class=\"o\">=</span> <span class=\"nx\">lastName</span><span class=\"p\">;</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"nx\">firstName</span><span class=\"p\">;</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"nx\">age</span><span class=\"p\">;</span>\n            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">address</span> <span class=\"o\">=</span> <span class=\"nx\">address</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kd\">static</span> <span class=\"nb\">self</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n           <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">toString</span><span class=\"p\">(){</span>\n           <span class=\"k\">return</span> <span class=\"dl\">\"</span><span class=\"s2\">[object Person]</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">getFullName</span><span class=\"p\">(){</span>\n           <span class=\"k\">return</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">firstName</span><span class=\"p\">}</span> <span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lastName</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n</code></pre>\n</div>\n<p><strong>Overriding Methods</strong>&nbsp;and&nbsp;<strong>Inheriting from another class</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">//ES5 Version</span>\n<span class=\"nx\">Employee</span><span class=\"p\">.</span><span class=\"nx\">prototype</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">Person</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">Employee</span><span class=\"p\">(</span><span class=\"nx\">firstName</span><span class=\"p\">,</span> <span class=\"nx\">lastName</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"p\">,</span> <span class=\"nx\">address</span><span class=\"p\">,</span> <span class=\"nx\">jobTitle</span><span class=\"p\">,</span> <span class=\"nx\">yearStarted</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Person</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">firstName</span><span class=\"p\">,</span> <span class=\"nx\">lastName</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"p\">,</span> <span class=\"nx\">address</span><span class=\"p\">);</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">jobTitle</span> <span class=\"o\">=</span> <span class=\"nx\">jobTitle</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">yearStarted</span> <span class=\"o\">=</span> <span class=\"nx\">yearStarted</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Employee</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">describe</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"s2\">`I am </span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getFullName</span><span class=\"p\">()}</span><span class=\"s2\"> and I have a position of </span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">jobTitle</span><span class=\"p\">}</span><span class=\"s2\"> and I started at </span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">yearStarted</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Employee</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">toString</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"dl\">\"</span><span class=\"s2\">[object Employee]</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//ES6 Version</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Employee</span> <span class=\"kd\">extends</span> <span class=\"nx\">Person</span> <span class=\"p\">{</span> <span class=\"c1\">//Inherits from \"Person\" class</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">firstName</span><span class=\"p\">,</span> <span class=\"nx\">lastName</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"p\">,</span> <span class=\"nx\">address</span><span class=\"p\">,</span> <span class=\"nx\">jobTitle</span><span class=\"p\">,</span> <span class=\"nx\">yearStarted</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">firstName</span><span class=\"p\">,</span> <span class=\"nx\">lastName</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"p\">,</span> <span class=\"nx\">address</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">jobTitle</span> <span class=\"o\">=</span> <span class=\"nx\">jobTitle</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">yearStarted</span> <span class=\"o\">=</span> <span class=\"nx\">yearStarted</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">describe</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"s2\">`I am </span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getFullName</span><span class=\"p\">()}</span><span class=\"s2\"> and I have a position of </span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">jobTitle</span><span class=\"p\">}</span><span class=\"s2\"> and I started at </span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">yearStarted</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">toString</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"c1\">// Overriding the \"toString\" method of \"Person\"</span>\n    <span class=\"k\">return</span> <span class=\"dl\">\"</span><span class=\"s2\">[object Employee]</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</code></pre>\n</div>\n<p>So how do we know that it uses&nbsp;<em>prototypes</em>&nbsp;under the hood?</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"kd\">class</span> <span class=\"nx\">Something</span> <span class=\"p\">{</span>\n\n   <span class=\"p\">}</span>\n\n   <span class=\"kd\">function</span> <span class=\"nx\">AnotherSomething</span><span class=\"p\">(){</span>\n\n   <span class=\"p\">}</span>\n   <span class=\"kd\">const</span> <span class=\"k\">as</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">AnotherSomething</span><span class=\"p\">();</span>\n   <span class=\"kd\">const</span> <span class=\"nx\">s</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Something</span><span class=\"p\">();</span>\n\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">Something</span><span class=\"p\">);</span> <span class=\"c1\">// logs \"function\"</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">AnotherSomething</span><span class=\"p\">);</span> <span class=\"c1\">// logs \"function\"</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">as</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">());</span> <span class=\"c1\">// logs \"[object Object]\"</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">as</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">());</span> <span class=\"c1\">// logs \"[object Object]\"</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">as</span><span class=\"p\">.</span><span class=\"nx\">toString</span> <span class=\"o\">===</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">);</span> \n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">.</span><span class=\"nx\">toString</span> <span class=\"o\">===</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">);</span> \n   <span class=\"c1\">// both logs return true indicating that we are still using </span>\n   <span class=\"c1\">// prototypes under the hoods because the Object.prototype is</span>\n   <span class=\"c1\">// the last part of the Prototype Chain and \"Something\"</span>\n   <span class=\"c1\">// and \"AnotherSomething\" both inherit from Object.prototype</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":44},{"question":"What are Template Literals?","answer":"<p><strong>Template Literals</strong>&nbsp;are a new way of making&nbsp;<strong>strings</strong>&nbsp;in JavaScript. We can make&nbsp;<strong>Template Literal</strong>&nbsp;by using the backtick or back-quote symbol.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">//ES5 Version</span>\n<span class=\"kd\">var</span> <span class=\"nx\">greet</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">Hi I</span><span class=\"se\">\\'</span><span class=\"s1\">m Mark</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">//ES6 Version</span>\n<span class=\"kd\">let</span> <span class=\"nx\">greet</span> <span class=\"o\">=</span> <span class=\"s2\">`Hi I'm Mark`</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<p>In the ES5 version, we need to escape the&nbsp;<code>'</code>&nbsp;using the&nbsp;<code>\\</code>&nbsp;to&nbsp;<em>escape</em>&nbsp;the normal functionality of that symbol which in this case is to finish that string value. In Template Literals, we don't need to do that.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">//ES5 Version</span>\n<span class=\"kd\">var</span> <span class=\"nx\">lastWords</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"se\">\\n</span><span class=\"dl\">'</span>\n  <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">   I  </span><span class=\"se\">\\n</span><span class=\"dl\">'</span>\n  <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">   Am  </span><span class=\"se\">\\n</span><span class=\"dl\">'</span>\n  <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">Iron Man </span><span class=\"se\">\\n</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n\n<span class=\"c1\">//ES6 Version</span>\n<span class=\"kd\">let</span> <span class=\"nx\">lastWords</span> <span class=\"o\">=</span> <span class=\"s2\">`\n    I\n    Am\n  Iron Man   \n`</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<p>In the ES5 version, we need to add this&nbsp;<code>\\n</code>&nbsp;to have a new line in our string. In Template Literals, we don't need to do that.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">//ES5 Version</span>\n<span class=\"kd\">function</span> <span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"dl\">'</span><span class=\"s1\">Hello </span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">!</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"c1\">//ES6 Version</span>\n<span class=\"kd\">const</span> <span class=\"nx\">greet</span> <span class=\"o\">=</span> <span class=\"nx\">name</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"s2\">`Hello </span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\"> !`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>In the ES5 version, If we need to add an expression or value in a string we need to use the&nbsp;<code>+</code>&nbsp;or string concatenation operator. In Template Literals, we can embed an expression using&nbsp;<code>${expr}</code>&nbsp;which makes it cleaner than the ES5 version.</p>","categories":[{"name":"Code","id":2}],"id":45},{"question":"What is Object Destructuring?","answer":"<p><strong>Object Destructuring</strong>&nbsp;is a new and cleaner way of&nbsp;<strong>getting</strong>&nbsp;or&nbsp;<strong>extracting</strong>&nbsp;values from an object or an array.</p>\n<p>Suppose we have an object that looks like this.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">employee</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Marko</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Polo</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">position</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Software Developer</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">yearHired</span><span class=\"p\">:</span> <span class=\"mi\">2017</span>\n<span class=\"p\">};</span>\n\n</code></pre>\n</div>\n<p>The old way of getting properties from an object is we make a variable that has the same name as the object property. This way is a hassle because we're making a new variable for every property. Imagine we have a big object with lots of properties and methods using this way in extracting properties will be irritating.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"nx\">employee</span><span class=\"p\">.</span><span class=\"nx\">firstName</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">lastName</span> <span class=\"o\">=</span> <span class=\"nx\">employee</span><span class=\"p\">.</span><span class=\"nx\">lastName</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">position</span> <span class=\"o\">=</span> <span class=\"nx\">employee</span><span class=\"p\">.</span><span class=\"nx\">position</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">yearHired</span> <span class=\"o\">=</span> <span class=\"nx\">employee</span><span class=\"p\">.</span><span class=\"nx\">yearHired</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<p>If we use&nbsp;<strong>object destructuring</strong>&nbsp;it looks cleaner and takes a little time than the old way. The syntax for object destructuring is that if we are getting properties in an object we use the&nbsp;<code>{}</code>&nbsp;and inside that, we specify the properties we want to extract and if we are getting data from an array we use the&nbsp;<code>[]</code>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"p\">{</span> <span class=\"nx\">firstName</span><span class=\"p\">,</span> <span class=\"nx\">lastName</span><span class=\"p\">,</span> <span class=\"nx\">position</span><span class=\"p\">,</span> <span class=\"nx\">yearHired</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">employee</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<p>If we want to change the variable name we want to extract we use the&nbsp;<code>propertyName:newName</code>&nbsp;syntax. In this example the value of&nbsp;<code>fName</code>&nbsp;variable will hold the value of the&nbsp;<code>firstName</code>&nbsp;property and&nbsp;<code>lName</code>&nbsp;variable will hold the value of the&nbsp;<code>lastName</code>&nbsp;property.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"p\">{</span> <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"nx\">fName</span><span class=\"p\">,</span> <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"nx\">lName</span><span class=\"p\">,</span> <span class=\"nx\">position</span><span class=\"p\">,</span> <span class=\"nx\">yearHired</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">employee</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<p>We can also have default values when destructuring. In this example, if the&nbsp;<code>firstName</code>&nbsp;property holds an&nbsp;<code>undefined</code>&nbsp;value in the object then when we destructure the&nbsp;<code>firstName</code>&nbsp;variable will hold a default of&nbsp;<code>\"Mark\"</code>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"p\">{</span> <span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Mark</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"nx\">lName</span><span class=\"p\">,</span> <span class=\"nx\">position</span><span class=\"p\">,</span> <span class=\"nx\">yearHired</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">employee</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<h3><a class=\"anchor\" href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#47-what-are-es6-modules\" name=\"47-what-are-es6-modules\"></a></h3>","categories":[{"name":"Code","id":2}],"id":46},{"question":"What are ES6 Modules?","answer":"<p><strong>Modules</strong>&nbsp;lets us split our code base to multiple files for more maintainability and this lets us avoid putting all of our code in one big file (yucksss). Before ES6 has supported Modules there were two popular module systems that were used for Code Maintainability in&nbsp;<strong>JavaScript</strong>.</p>\n<ul>\n<li>CommonJS -&nbsp;<strong>Nodejs</strong></li>\n<li>AMD (Asynchronous Module Definition) -&nbsp;<strong>Browsers</strong></li>\n</ul>\n<p>Basically, the sytanx for using modules are straightforward,<br /><code>import</code>&nbsp;is used for&nbsp;<em>getting</em>&nbsp;functionality from another file or several functionalities or values while<br /><code>export</code>&nbsp;is used for&nbsp;<em>exposing</em>&nbsp;functionality from a file or several functionalities or values.</p>\n<p><strong>Exporting functionalites in a File or Named Exports</strong></p>\n<p><em>Using ES5 (CommonJS)</em></p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// Using ES5 CommonJS - helpers.js</span>\n<span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">isNull</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">isUndefined</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">isNullOrUndefined</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">isNull</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">isUndefined</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p><em>Using ES6 Modules</em></p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// Using ES6 Modules - helpers.js</span>\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">isNull</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">){</span>\n  <span class=\"k\">return</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">isUndefined</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">isNullOrUndefined</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">isNull</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">isUndefined</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n\n</code></pre>\n</div>\n<p><strong>Importing functionalites in another File</strong></p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// Using ES5 (CommonJS) - index.js</span>\n<span class=\"kd\">const</span> <span class=\"nx\">helpers</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./helpers.js</span><span class=\"dl\">'</span><span class=\"p\">);</span> <span class=\"c1\">// helpers is an object</span>\n<span class=\"kd\">const</span> <span class=\"nx\">isNull</span> <span class=\"o\">=</span> <span class=\"nx\">helpers</span><span class=\"p\">.</span><span class=\"nx\">isNull</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">isUndefined</span> <span class=\"o\">=</span> <span class=\"nx\">helpers</span><span class=\"p\">.</span><span class=\"nx\">isUndefined</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">isNullOrUndefined</span> <span class=\"o\">=</span> <span class=\"nx\">helpers</span><span class=\"p\">.</span><span class=\"nx\">isNullOrUndefined</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// or if your environment supports Destructuring</span>\n<span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">isNull</span><span class=\"p\">,</span> <span class=\"nx\">isUndefined</span><span class=\"p\">,</span> <span class=\"nx\">isNullOrUndefined</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./helpers.js</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// ES6 Modules - index.js</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">helpers</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./helpers.js</span><span class=\"dl\">'</span><span class=\"p\">;</span> <span class=\"c1\">// helpers is an object</span>\n\n<span class=\"c1\">// or </span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">isNull</span><span class=\"p\">,</span> <span class=\"nx\">isUndefined</span><span class=\"p\">,</span> <span class=\"nx\">isNullOrUndefined</span> <span class=\"k\">as</span> <span class=\"nx\">isValid</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./helpers.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// using \"as\" for renaming named exports</span>\n</code></pre>\n</div>\n<p><strong>Exporting a Single Functionality in a File or Default Exports</strong></p>\n<p><em>Using ES5 (CommonJS)</em></p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// Using ES5 (CommonJS) - index.js</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Helpers</span> <span class=\"p\">{</span>\n  <span class=\"kd\">static</span> <span class=\"nx\">isNull</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">static</span> <span class=\"nx\">isUndefined</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">static</span> <span class=\"nx\">isNullOrUndefined</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isNull</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isUndefined</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">Helpers</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<p><em>Using ES6 Modules</em></p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// Using ES6 Modules - helpers.js</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Helpers</span> <span class=\"p\">{</span>\n  <span class=\"kd\">static</span> <span class=\"nx\">isNull</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">static</span> <span class=\"nx\">isUndefined</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">static</span> <span class=\"nx\">isNullOrUndefined</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isNull</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isUndefined</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">Helpers</span>\n</code></pre>\n</div>\n<p><strong>Importing a Single Functionality from another File</strong></p>\n<p><em>Using ES5 (CommonJS)</em></p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// Using ES5 (CommonJS) - index.js</span>\n<span class=\"kd\">const</span> <span class=\"nx\">Helpers</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./helpers.js</span><span class=\"dl\">'</span><span class=\"p\">);</span> \n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">Helpers</span><span class=\"p\">.</span><span class=\"nx\">isNull</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">));</span>\n</code></pre>\n</div>\n<p><em>Using ES6 Modules</em></p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">Helpers</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">.helpers.js</span><span class=\"dl\">'</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">Helpers</span><span class=\"p\">.</span><span class=\"nx\">isNull</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">));</span>\n</code></pre>\n</div>\n<p>This is the basics of using&nbsp;<strong>ES6 Modules</strong>. I won't explain all about Modules because it's a broad topic and my Post is now really long.</p>","categories":[{"name":"Code","id":2}],"id":47},{"question":"What is the Set object and how does it work?","answer":"<p>The&nbsp;<strong>Set</strong>&nbsp;object is an&nbsp;<strong>ES6</strong>&nbsp;feature that lets you store unique values,&nbsp;<strong>primitives</strong>&nbsp;or&nbsp;<strong>object references</strong>. A value in a Set can only occur&nbsp;<strong>once</strong>. It checks if a value exists in the set object using the&nbsp;<strong>SameValueZero</strong>&nbsp;algorithm.</p>\n<p>We can make&nbsp;<code>Set</code>&nbsp;instance using&nbsp;<code>Set</code>&nbsp;constructor and we can optionally pass an&nbsp;<code>Iterable</code>&nbsp;as the initial value.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>\n<span class=\"kd\">const</span> <span class=\"nx\">set1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Set</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">set2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Set</span><span class=\"p\">([</span><span class=\"dl\">\"</span><span class=\"s2\">a</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">b</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">c</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">d</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">d</span><span class=\"dl\">\"</span><span class=\"p\">,</span><span class=\"dl\">\"</span><span class=\"s2\">e</span><span class=\"dl\">\"</span><span class=\"p\">]);</span>\n\n</code></pre>\n</div>\n<p>We can add a new value into the&nbsp;<code>Set</code>&nbsp;instance using the&nbsp;<code>add</code>&nbsp;method and since the&nbsp;<code>add</code>&nbsp;returns the&nbsp;<code>Set</code>&nbsp;object we can chain&nbsp;<code>add</code>&nbsp;calls. If a value already exists in&nbsp;<code>Set</code>&nbsp;object it will not be added again.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>\n<span class=\"nx\">set2</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">f</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">set2</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">g</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">h</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">i</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">j</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">k</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">k</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// the last \"k\" will not be added to the set object because it already exists</span>\n\n</code></pre>\n</div>\n<p>We can remove a value from the&nbsp;<code>Set</code>&nbsp;instance using the&nbsp;<code>delete</code>&nbsp;method, this method returns a&nbsp;<code>boolean</code>&nbsp;indicating&nbsp;<code>true</code>&nbsp;if a value exists in the&nbsp;<code>Set</code>&nbsp;object and&nbsp;<code>false</code>&nbsp;indicating that value does not exist.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>\n<span class=\"nx\">set2</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">k</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"c1\">// returns true because \"k\" exists in the set object</span>\n<span class=\"nx\">set2</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">z</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"c1\">// returns false because \"z\" does not exists in the set object</span>\n\n</code></pre>\n</div>\n<p>We can check if a specific value exists in the&nbsp;<code>Set</code>&nbsp;instance using the&nbsp;<code>has</code>&nbsp;method.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>\n<span class=\"nx\">set2</span><span class=\"p\">.</span><span class=\"nx\">has</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">a</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"c1\">// returns true because \"a\" exists in the set object</span>\n<span class=\"nx\">set2</span><span class=\"p\">.</span><span class=\"nx\">has</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">z</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"c1\">// returns false because \"z\" does not exists in the set object</span>\n\n</code></pre>\n</div>\n<p>We can get the length of the&nbsp;<code>Set</code>&nbsp;instance using the&nbsp;<code>size</code>&nbsp;property.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>\n<span class=\"nx\">set2</span><span class=\"p\">.</span><span class=\"nx\">size</span> <span class=\"c1\">// returns 10</span>\n\n</code></pre>\n</div>\n<p>We can delete or remove all the elements in the&nbsp;<code>Set</code>&nbsp;instance using the&nbsp;<code>clear</code>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>\n<span class=\"nx\">set2</span><span class=\"p\">.</span><span class=\"nx\">clear</span><span class=\"p\">();</span> <span class=\"c1\">// clears the set data</span>\n\n</code></pre>\n</div>\n<p>We can use the&nbsp;<code>Set</code>&nbsp;object for removing duplicate elements in an array.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>\n<span class=\"kd\">const</span> <span class=\"nx\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">];</span>\n<span class=\"kd\">const</span> <span class=\"nx\">uniqueNums</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"k\">new</span> <span class=\"nb\">Set</span><span class=\"p\">(</span><span class=\"nx\">numbers</span><span class=\"p\">)];</span> <span class=\"c1\">// has a value of [1,2,3,4,5,6,7,8]</span>\n</code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":48},{"question":"What is a Callback function?","answer":"<p>A&nbsp;<strong>Callback</strong>&nbsp;function is a function that is gonna get called at a later point in time.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">btnAdd</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">btnAdd</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"nx\">btnAdd</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"nx\">clickCallback</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// do something useless</span>\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n<p>In this example, we wait for the&nbsp;<code>click event</code>&nbsp;in the element with an id of&nbsp;<strong>btnAdd</strong>, if it is&nbsp;<code>clicked</code>, the&nbsp;<code>clickCallback</code>&nbsp;function is executed. A&nbsp;<strong>Callback</strong>&nbsp;function adds some functionality to some data or event. The&nbsp;<code>reduce</code>,&nbsp;<code>filter</code>&nbsp;and&nbsp;<code>map</code>&nbsp;methods in&nbsp;<strong>Array</strong>&nbsp;expects a callback as a parameter. A good analogy for a callback is when you call someone and if they don't answer you leave a message and you expect them to&nbsp;<strong>callback</strong>. The act of calling someone or leaving a&nbsp;<strong>message</strong>&nbsp;is the&nbsp;<strong>event or data</strong>&nbsp;and the&nbsp;<strong>callback</strong>&nbsp;is the&nbsp;<strong>action that you expect to occur later</strong>.</p>","categories":[{"name":"Code","id":2}],"id":49},{"question":"What are Promises?","answer":"<p><strong>Promises</strong>&nbsp;are one way in handling asynchronous operations in&nbsp;<strong>JavaScript</strong>. It represents the value of an asynchronous operation.&nbsp;<strong>Promises</strong>&nbsp;was made to solve the problem of doing and dealing with async code before promises we're using callbacks.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFile</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">somefile.txt</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n<p>The problem with this approach if we have another async operation inside the callback and another. We will have a code that is messy and unreadable. This code is called&nbsp;<strong>Callback Hell</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">//Callback Hell yucksss</span>\n<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFile</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">somefile.txt</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">//your code here</span>\n  <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readdir</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">directory</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//your code here</span>\n    <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">mkdir</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">directory</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">//your code here</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre>\n</div>\n<p>If we use promises in this code it will be more readable and easy to understand and easy to maintain.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">promReadFile</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">file/path</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">data</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">promReaddir</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">directory</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n  <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">data</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">promMkdir</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">directory</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n  <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n</code></pre>\n</div>\n<p>Promises have 3 different states.</p>\n<p><strong>Pending</strong>&nbsp;- The initial state of a promise. The promise's outcome has not yet been known because the operation has not been completed yet.</p>\n<p><strong>Fulfilled</strong>&nbsp;- The async operation is completed and successful with the resulting value.</p>\n<p><strong>Rejected</strong>&nbsp;- The async operation has failed and has a&nbsp;<em>reason</em>&nbsp;on why it failed.</p>\n<p><strong>Settled</strong>&nbsp;- If the promise has been either&nbsp;<strong>Fulfilled</strong>&nbsp;or&nbsp;<strong>Rejected</strong>.</p>\n<p>The&nbsp;<strong>Promise</strong>&nbsp;constructor has two parameters which are functions&nbsp;<code>resolve</code>&nbsp;and&nbsp;<code>reject</code>&nbsp;respectively.<br />If the async operation has been completed without errors call the&nbsp;<code>resolve</code>&nbsp;function to resolve the promise or if an error occurred<br />call the&nbsp;<code>reject</code>&nbsp;function and pass the error or reason to it.<br />We can access the result of the fulfilled promise using the&nbsp;<code>.then</code><br />method and we catch errors in the&nbsp;<code>.catch</code>&nbsp;method. We chain multiple async promise operations in the&nbsp;<code>.then</code>&nbsp;method because the&nbsp;<code>.then</code>&nbsp;method returns a&nbsp;<strong>Promise</strong>&nbsp;just like the example in the imag e above.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">myPromiseAsync</span> <span class=\"o\">=</span> <span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">doSomeAsync</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">myPromiseAsync</span><span class=\"p\">()</span>\n  <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">result</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n  <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">reason</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">reason</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n</code></pre>\n</div>\n<p>We can make a helper func that converts an async operation with a callback to promise. It works like the&nbsp;<strong>promisify</strong>&nbsp;utility function from the node core module&nbsp;<code>util</code>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">toPromise</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">asyncFuncWithCallback</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">rej</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">asyncFuncWithCallback</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">e</span> <span class=\"p\">?</span> <span class=\"nx\">rej</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nx\">res</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">promReadFile</span> <span class=\"o\">=</span> <span class=\"nx\">toPromise</span><span class=\"p\">(</span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFile</span><span class=\"p\">);</span>\n\n<span class=\"nx\">promReadFile</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">file/path</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n  <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">));</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":50},{"question":"What is async/await and How does it work?","answer":"<p><em>async/await</em>&nbsp;is the new way of writing asynchronous or non-blocking code in&nbsp;<strong>JavaScript's</strong>. It is built on top of&nbsp;<strong>Promises</strong>. It makes writing asynchronous code more readable and cleaner than<br /><strong><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#50-what-are-promises\">Promises</a></strong>&nbsp;and&nbsp;<strong><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#49-what-is-a-callback-function\">Callbacks</a></strong>. But you must learn the basics of&nbsp;<strong>Promises</strong>&nbsp;before using this feature because as I said earlier it is built on top of&nbsp;<strong>Promises</strong>&nbsp;which means is still uses&nbsp;<strong>Promises</strong>&nbsp;under the hood.</p>\n<p>Using Promises.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">callApi</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">url/to/api/endpoint</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">resp</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">resp</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">())</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">data</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"c1\">//do something with \"data\"</span>\n    <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"c1\">//do something with \"err\"</span>\n    <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n</code></pre>\n</div>\n<p>Using Async/Await.</p>\n<p><strong>Note</strong>: We're using the old&nbsp;<em>try/catch</em>&nbsp;statement to&nbsp;<strong>catch</strong>&nbsp;any errors that happened in any of those async operations inside the&nbsp;<em>try</em>&nbsp;statement.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">callApi</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">resp</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">url/to/api/endpoint</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">resp</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n    <span class=\"c1\">//do something with \"data\"</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">//do something with \"err\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p><strong>Note</strong>: The&nbsp;<em>async</em>&nbsp;keyword before the function declaration makes the function return&nbsp;<em>implicitly</em>&nbsp;a&nbsp;<strong>Promise</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">giveMeOne</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"nx\">giveMeOne</span><span class=\"p\">()</span>\n  <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">num</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">);</span> <span class=\"c1\">// logs 1</span>\n  <span class=\"p\">});</span>\n</code></pre>\n</div>\n<p><strong>Note</strong>: The&nbsp;<em>await</em>&nbsp;keyword can&nbsp;<strong>only</strong>&nbsp;be used inside an&nbsp;<strong>async function</strong>. Using&nbsp;<em>await</em>&nbsp;keyword in any other function which is not an&nbsp;<strong>async function</strong>&nbsp;will throw an error. The&nbsp;<em>await</em>&nbsp;keyword&nbsp;<strong>awaits</strong>&nbsp;the right-hand side expression (presumably a&nbsp;<strong>Promise</strong>) to return before executing the next line of code.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">giveMeOne</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">getOne</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">giveMeOne</span><span class=\"p\">();</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//Throws a Compile-Time Error = Uncaught SyntaxError: await is only valid in an async function</span>\n\n<span class=\"k\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">getTwo</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">num1</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">giveMeOne</span><span class=\"p\">();</span> <span class=\"c1\">//finishes this async operation first before going to</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">num2</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">giveMeOne</span><span class=\"p\">();</span> <span class=\"c1\">//this line</span>\n    <span class=\"k\">return</span> <span class=\"nx\">num1</span> <span class=\"o\">+</span> <span class=\"nx\">num2</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">await</span> <span class=\"nx\">getTwo</span><span class=\"p\">();</span> <span class=\"c1\">// returns 2</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":51},{"question":"What's the difference between Spread operator and Rest operator?","answer":"<p>The&nbsp;<strong>Spread operator</strong>&nbsp;and&nbsp;<strong>Rest paremeters</strong>&nbsp;have the same operator&nbsp;<code>...</code>&nbsp;the difference between is that the&nbsp;<strong>Spread operator</strong>&nbsp;we&nbsp;<strong>give</strong>&nbsp;or&nbsp;<strong>spread</strong>&nbsp;individual data of an array to another data while the&nbsp;<strong>Rest parameters</strong>&nbsp;is used in a function or an array to&nbsp;<strong>get</strong>&nbsp;all the arguments or values and put them in an array or&nbsp;<strong>extract</strong>&nbsp;some pieces of them.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">];</span>\n<span class=\"kd\">const</span> <span class=\"nx\">sum</span> <span class=\"o\">=</span> <span class=\"nx\">add</span><span class=\"p\">(...</span><span class=\"nx\">nums</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sum</span><span class=\"p\">);</span>\n\n</code></pre>\n</div>\n<p>In this example, we're using the&nbsp;<strong>Spread Operator</strong>&nbsp;when we call the&nbsp;<code>add</code>&nbsp;function we are&nbsp;<strong>spreading</strong>&nbsp;the&nbsp;<code>nums</code>&nbsp;array. So the value of parameter&nbsp;<code>a</code>&nbsp;will be&nbsp;<strong>5</strong>&nbsp;and the value of&nbsp;<code>b</code>&nbsp;will be&nbsp;<strong>6</strong>. So the sum will be&nbsp;<strong>11</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(...</span><span class=\"nx\">rest</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">rest</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">total</span><span class=\"p\">,</span><span class=\"nx\">current</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">total</span> <span class=\"o\">+</span> <span class=\"nx\">current</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">));</span> <span class=\"c1\">// logs 3</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">));</span> <span class=\"c1\">// logs 15</span>\n</code></pre>\n</div>\n<p>In this example, we have a function&nbsp;<code>add</code>&nbsp;that accepts any number of arguments and adds them all and return the total.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">first</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">others</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">];</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">first</span><span class=\"p\">);</span> <span class=\"c1\">//logs 1</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">others</span><span class=\"p\">);</span> <span class=\"c1\">//logs [2,3,4,5]</span>\n</code></pre>\n</div>\n<p>In this another example, we are using the&nbsp;<strong>Rest operator</strong>&nbsp;to extract all the remaining array values and put them in array&nbsp;<code>others</code>&nbsp;except the first item.</p>","categories":[{"name":"Code","id":2}],"id":52},{"question":"What are Default Parameters?","answer":"<p><strong>Default Parameters</strong>&nbsp;is a new way of defining default variables in&nbsp;<strong>JavaScript</strong>&nbsp;it is available in the&nbsp;<strong>ES6</strong>&nbsp;or&nbsp;<strong>ECMAScript 2015</strong>&nbsp;Version.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">//ES5 Version</span>\n<span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"nx\">b</span><span class=\"p\">){</span>\n  <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"nx\">a</span> <span class=\"o\">||</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">b</span> <span class=\"o\">||</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//ES6 Version</span>\n<span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">){</span>\n  <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">//If we don't pass any argument for 'a' or 'b' then </span>\n<span class=\"c1\">// it's gonna use the \"default parameter\" value which is 0</span>\n<span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// returns 1 </span>\n</code></pre>\n</div>\n<p>We can also use&nbsp;<strong>Destructuring</strong>&nbsp;in&nbsp;<strong>Default Paremeters</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">getFirst</span><span class=\"p\">([</span><span class=\"nx\">first</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">rest</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">first</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">getFirst</span><span class=\"p\">();</span>  <span class=\"c1\">// returns 0</span>\n<span class=\"nx\">getFirst</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">]);</span>  <span class=\"c1\">// returns 10</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">getArr</span><span class=\"p\">({</span> <span class=\"nx\">nums</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">nums</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"p\">}){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">nums</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">getArr</span><span class=\"p\">();</span> <span class=\"c1\">// returns [1, 2, 3, 4]</span>\n<span class=\"nx\">getArr</span><span class=\"p\">({</span><span class=\"na\">nums</span><span class=\"p\">:[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]});</span> <span class=\"c1\">// returns [5,4,3,2,1]</span>\n</code></pre>\n</div>\n<p>We can also use the parameters defined first to the parameters defined after them.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">doSomethingWithValue</span><span class=\"p\">(</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Hello World</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">callback</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"nx\">callback</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">doSomethingWithValue</span><span class=\"p\">();</span> <span class=\"c1\">//logs \"Hello World\"</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":53},{"question":"What are Wrapper Objects?","answer":"<p><strong>Primitive Values</strong>&nbsp;like&nbsp;<code>string</code>,<code>number</code>&nbsp;and&nbsp;<code>boolean</code>&nbsp;with the exception of&nbsp;<code>null</code>&nbsp;and&nbsp;<code>undefined</code>&nbsp;have properties and methods even though they are not&nbsp;<code>objects</code>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">marko</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">name</span><span class=\"p\">);</span> <span class=\"c1\">// logs  \"string\"</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">.</span><span class=\"nx\">toUpperCase</span><span class=\"p\">());</span> <span class=\"c1\">// logs  \"MARKO\"</span>\n</code></pre>\n</div>\n<p><code>name</code>&nbsp;is a&nbsp;<code>primitive string</code>&nbsp;value that has no properties and methods but in this example we are calling a&nbsp;<code>toUpperCase()</code>&nbsp;method which does not throw an error but returns&nbsp;<code>MARKO</code>.</p>\n<p>The reason for this is that the&nbsp;<code>primitive</code>&nbsp;value is temporarily converted or&nbsp;<em>coerce</em>&nbsp;to an&nbsp;<code>object</code>&nbsp;so the&nbsp;<code>name</code>&nbsp;variable behaves like an&nbsp;<code>object</code>. Every&nbsp;<code>primitive</code>&nbsp;except&nbsp;<code>null</code>&nbsp;and&nbsp;<code>undefined</code>&nbsp;have&nbsp;<strong>Wrapper Objects</strong>. The Wrapper Objects are&nbsp;<code>String</code>,<code>Number</code>,<code>Boolean</code>,<code>Symbol</code>&nbsp;and&nbsp;<code>BigInt</code>. In this case, the&nbsp;<code>name.toUpperCase()</code>&nbsp;invocation, behind the scenes it looks like this.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">).</span><span class=\"nx\">toUpperCase</span><span class=\"p\">());</span> <span class=\"c1\">// logs  \"MARKO\"</span>\n\n</code></pre>\n</div>\n<p>The newly created object is immediately discarded after we finished accessing a property or calling a method.</p>","categories":[{"name":"Code","id":2}],"id":54},{"question":"What is the difference between Implicit and Explicit Coercion?","answer":"<p><strong>Implicit</strong>&nbsp;Coercion is a way of converting values to another type without us programmer doing it directly or by hand.</p>\n<p>Suppose we have an example below.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">6</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"kc\">false</span> <span class=\"o\">+</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"mi\">6</span> <span class=\"o\">*</span> <span class=\"dl\">'</span><span class=\"s1\">2</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n</code></pre>\n</div>\n<p>The&nbsp;<strong>first</strong>&nbsp;<code>console.log</code>&nbsp;statement logs&nbsp;<code>16</code>. In other languages this would throw a compile time error but in&nbsp;<strong>JavaScript</strong>&nbsp;the&nbsp;<code>1</code>&nbsp;is converted to a&nbsp;<code>string</code>&nbsp;then concatenated with the&nbsp;<code>+</code>&nbsp;operator. We did not do anything, yet it was converted automatically by&nbsp;<strong>JavaScript</strong>&nbsp;for us.<br />The&nbsp;<strong>second</strong>&nbsp;<code>console.log</code>&nbsp;statement logs&nbsp;<code>1</code>, it converts the&nbsp;<code>false</code>&nbsp;to a&nbsp;<code>boolean</code>&nbsp;which will result to a&nbsp;<code>0</code>&nbsp;and the&nbsp;<code>true</code>&nbsp;will be&nbsp;<code>1</code>&nbsp;hence the result is&nbsp;<code>1</code>.<br />The&nbsp;<strong>third</strong>&nbsp;<code>console.log</code>&nbsp;statement logs&nbsp;<code>12</code>, it converts the&nbsp;<code>'2'</code>&nbsp;to a&nbsp;<code>number</code>&nbsp;before multiplying&nbsp;<code>6 * 2</code>&nbsp;hence the result&nbsp;<code>12</code>.<br /><a href=\"https://delapouite.com/ramblings/javascript-coercion-rules.html\">JavaScript Coercion Rules</a></p>\n<p>While&nbsp;<strong>Explicit</strong>&nbsp;Coercion is the way of converting values to another type where we (<em>programmers</em>)&nbsp;<strong>explicitly</strong>&nbsp;do it.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">6</span><span class=\"dl\">'</span><span class=\"p\">));</span>\n</code></pre>\n</div>\n<p>In this example, we use the&nbsp;<code>parseInt</code>&nbsp;function to convert the&nbsp;<code>'6'</code>&nbsp;to a&nbsp;<code>number</code>&nbsp;then adding the&nbsp;<code>1</code>&nbsp;and&nbsp;<code>6</code>&nbsp;using the&nbsp;<code>+</code>&nbsp;operator.</p>","categories":[{"name":"Code","id":2}],"id":55},{"question":"What is NaN? and How to check if a value is NaN?","answer":"<p><code>NaN</code>&nbsp;means&nbsp;<strong>\"Not A Number\"</strong>&nbsp;is a value in&nbsp;<strong>JavaScript</strong>&nbsp;that is a result in converting or performing an operation to a number to non-number value hence results to&nbsp;<code>NaN</code>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">a</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">abc</span><span class=\"dl\">'</span><span class=\"p\">));</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">));</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">));</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"o\">++</span><span class=\"nx\">a</span><span class=\"p\">));</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">parseInt</span><span class=\"p\">({}</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">));</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">abc</span><span class=\"dl\">'</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">));</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"o\">/</span> <span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">10a</span><span class=\"dl\">'</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">));</span>\n\n</code></pre>\n</div>\n<p><strong>JavaScript</strong>&nbsp;has a built-in method&nbsp;<code>isNaN</code>&nbsp;that tests if value is&nbsp;<code>isNaN</code>&nbsp;value. But this function has a weird behaviour.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">());</span> <span class=\"c1\">//logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">));</span> <span class=\"c1\">//logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">({}));</span> <span class=\"c1\">//logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">)));</span> <span class=\"c1\">//logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"p\">}));</span> <span class=\"c1\">//logs true</span>\n</code></pre>\n</div>\n<p>All these&nbsp;<code>console.log</code>&nbsp;statements return&nbsp;<code>true</code>&nbsp;even though those values we pass are not&nbsp;<code>NaN</code>.</p>\n<p>In&nbsp;<strong>ES6</strong>&nbsp;or&nbsp;<strong>ECMAScript 2015</strong>, it is recommended that we use&nbsp;<code>Number.isNaN</code>&nbsp;method because it really checks the value if it really is&nbsp;<code>NaN</code>&nbsp;or we can make our own helper function that check for this problem because in&nbsp;<strong>JavaScript</strong>&nbsp;<code>NaN</code>&nbsp;is the only value that is not equal to itself.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">checkIfNaN</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">value</span> <span class=\"o\">!==</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":56},{"question":"How to check if a value is an Array?","answer":"<p>We can check if a value is an&nbsp;<strong>Array</strong>&nbsp;by using the&nbsp;<code>Array.isArray</code>&nbsp;method available from the&nbsp;<strong>Array</strong>&nbsp;global object. It returns true when the parameter pass to it is an&nbsp;<strong>Array</strong>&nbsp;otherwise false.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">));</span>  <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"dl\">\"\"</span><span class=\"p\">));</span> <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">());</span> <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">));</span> <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">({</span> <span class=\"na\">length</span><span class=\"p\">:</span> <span class=\"mi\">5</span> <span class=\"p\">}));</span> <span class=\"c1\">//logs false</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">([]));</span> <span class=\"c1\">//logs true</span>\n</code></pre>\n</div>\n<p>If your environment does not support this method you can use the polyfill implementation.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"kd\">function</span> <span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">){</span>\n     <span class=\"k\">return</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">[object Array]</span><span class=\"dl\">\"</span>\n   <span class=\"p\">}</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":57},{"question":"How to check if a number is even without using the % or modulo operator?","answer":"<p>We can use the&nbsp;<strong>bitwise AND</strong><code>&amp;</code>&nbsp;operator for this problem. The&nbsp;<code>&amp;</code>&nbsp;operates on its operand and treats them as binary values and performs the&nbsp;<strong>AND</strong>&nbsp;operation.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">isEven</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n</div>\n<p><code>0</code>&nbsp;in binary is&nbsp;<strong>000</strong>.<br /><code>1</code>&nbsp;in binary is&nbsp;<strong>001</strong>.<br /><code>2</code>&nbsp;in binary is&nbsp;<strong>010</strong>.<br /><code>3</code>&nbsp;in binary is&nbsp;<strong>011</strong>.<br /><code>4</code>&nbsp;in binary is&nbsp;<strong>100</strong>.<br /><code>5</code>&nbsp;in binary is&nbsp;<strong>101</strong>.<br /><code>6</code>&nbsp;in binary is&nbsp;<strong>110</strong>.<br /><code>7</code>&nbsp;in binary is&nbsp;<strong>111</strong>.<br />and so on...</p>\n<div class=\"table-wrapper-paragraph\">\n<table>\n<thead>\n<tr>\n<th><code>a</code></th>\n<th><code>b</code></th>\n<th><code>a &amp; b</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>So when we&nbsp;<code>console.log</code>&nbsp;this expression&nbsp;<code>5 &amp; 1</code>&nbsp;it returns&nbsp;<code>1</code>. Ok, first the&nbsp;<code>&amp;</code>&nbsp;operator converts both numbers to binary so&nbsp;<code>5</code>&nbsp;turns to&nbsp;<strong>101</strong>&nbsp;and&nbsp;<code>1</code>&nbsp;turns to&nbsp;<strong>001</strong>.<br />Then it compares every bit&nbsp;<strong>(0's and 1's)</strong>&nbsp;using the bitwise&nbsp;<strong>AND</strong>&nbsp;operator.&nbsp;<strong>101</strong>&nbsp;<code>&amp;</code>&nbsp;<strong>001</strong>. As we can see from the table the result can be only&nbsp;<code>1</code>&nbsp;if&nbsp;<code>a</code>&nbsp;<strong>AND</strong>&nbsp;<code>b</code>&nbsp;are&nbsp;<code>1</code>.</p>\n<div class=\"table-wrapper-paragraph\">\n<table>\n<thead>\n<tr>\n<th><code>101 &amp; 001</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>101</td>\n</tr>\n<tr>\n<td>001</td>\n</tr>\n<tr>\n<td><strong>001</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>So first we compare the left most bit&nbsp;<code>1</code><code>&amp;</code><code>0</code>&nbsp;the result should be&nbsp;<code>0</code>.</li>\n<li>Then we compare the middle bit&nbsp;<code>0</code><code>&amp;</code><code>0</code>&nbsp;the result should be&nbsp;<code>0</code>.</li>\n<li>Then we compare the last bit&nbsp;<code>1</code><code>&amp;</code><code>1</code>&nbsp;the result should be&nbsp;<code>1</code>.</li>\n<li>Then the binary result&nbsp;<code>001</code>&nbsp;will be converted to a decimal number which will be&nbsp;<code>1</code>.</li>\n</ul>\n<p>If we&nbsp;<code>console.log</code>&nbsp;this expression&nbsp;<code>4 &amp; 1</code>&nbsp;it will return&nbsp;<code>0</code>. Knowing the last bit of&nbsp;<code>4</code>&nbsp;is&nbsp;<code>0</code>&nbsp;and&nbsp;<code>0 &amp; 1</code>&nbsp;will be&nbsp;<code>0</code>. If you have a hard time understand this we could use a&nbsp;<strong>recursive</strong>&nbsp;function to solve this problem.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">isEven</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"nx\">num</span> <span class=\"o\">===</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"nx\">isEven</span><span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":58},{"question":"How to check if a certain property exists in an object?","answer":"<p>There are three possible ways to check if a property exists in an object.</p>\n<p>First , using the&nbsp;<code>in</code>&nbsp;operator. The syntax for using the&nbsp;<code>in</code>&nbsp;operator is like this&nbsp;<code>propertyname in object</code>. It returns&nbsp;<code>true</code>&nbsp;if the property exists otherwise it returns&nbsp;<code>false</code>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">o</span> <span class=\"o\">=</span> <span class=\"p\">{</span> \n  <span class=\"dl\">\"</span><span class=\"s2\">prop</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">bwahahah</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">prop2</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">hweasa</span><span class=\"dl\">\"</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">prop</span><span class=\"dl\">\"</span> <span class=\"k\">in</span> <span class=\"nx\">o</span><span class=\"p\">);</span> <span class=\"c1\">//This logs true indicating the property \"prop\" is in \"o\" object</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">prop1</span><span class=\"dl\">\"</span> <span class=\"k\">in</span> <span class=\"nx\">o</span><span class=\"p\">);</span> <span class=\"c1\">//This logs false indicating the property \"prop\" is not in  \"o\" object</span>\n</code></pre>\n</div>\n<p>Second, using the&nbsp;<code>hasOwnProperty</code>&nbsp;method in objects. This method is available on all objects in JavaScript. It returns&nbsp;<code>true</code>&nbsp;if the property exists otherwise it returns&nbsp;<code>false</code>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">//Still using the o object in the first example.</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">o</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">prop2</span><span class=\"dl\">\"</span><span class=\"p\">));</span> <span class=\"c1\">// This logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">o</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">prop1</span><span class=\"dl\">\"</span><span class=\"p\">));</span> <span class=\"c1\">// This logs false</span>\n</code></pre>\n</div>\n<p>Third, using the bracket notation&nbsp;<code>obj[\"prop\"]</code>. If the property exists it returns the value of that property otherwise this will return&nbsp;<code>undefined</code>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">//Still using the o object in the first example.</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">o</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">prop</span><span class=\"dl\">\"</span><span class=\"p\">]);</span> <span class=\"c1\">// This logs \"bwahahah\"</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">o</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">prop1</span><span class=\"dl\">\"</span><span class=\"p\">]);</span> <span class=\"c1\">// This logs undefined</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":59},{"question":"What is AJAX?","answer":"<p><strong>AJAX</strong>&nbsp;stands for&nbsp;<strong>Asynchronous JavaScript and XML</strong>. It is a group of related technologies used to display data asynchronously. What this means is that we can send data to the server and get data from the server without reloading the web page.</p>\n<p>Technologies use for&nbsp;<strong>AJAX</strong>.</p>\n<ul>\n<li><strong>HTML</strong>&nbsp;- web page structure</li>\n<li><strong>CSS</strong>&nbsp;- the styling for the webpage</li>\n<li><strong>JavaScript</strong>&nbsp;- the behaviour of the webpage and updates to the&nbsp;<strong>DOM</strong></li>\n<li><strong>XMLHttpRequest API</strong>&nbsp;- used to send and retrieve data from the server</li>\n<li><strong>PHP,Python,Nodejs</strong>&nbsp;- Some Server-Side language</li>\n</ul>","categories":[{"name":"Code","id":2}],"id":60},{"question":"What are the ways of making objects in JavaScript?","answer":"<p>Using&nbsp;<strong>Object Literal</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"kd\">const</span> <span class=\"nx\">o</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Mark</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n   <span class=\"nx\">greeting</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"s2\">`Hi, I'm </span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"nx\">o</span><span class=\"p\">.</span><span class=\"nx\">greeting</span><span class=\"p\">();</span> <span class=\"c1\">//returns \"Hi, I'm Mark\"</span>\n</code></pre>\n</div>\n<p>Using&nbsp;<strong>Constructor Functions</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">Person</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Person</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"k\">return</span> <span class=\"s2\">`Hi, I'm </span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">mark</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Mark</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"nx\">mark</span><span class=\"p\">.</span><span class=\"nx\">greeting</span><span class=\"p\">();</span> <span class=\"c1\">//returns \"Hi, I'm Mark\"</span>\n</code></pre>\n</div>\n<p>Using&nbsp;<strong>Object.create</strong>&nbsp;method.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"nx\">greeting</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"s2\">`Hi, I'm </span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">o</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">);</span> <span class=\"c1\">// sets the prototype of \"o\" to be \"n\"</span>\n\n<span class=\"nx\">o</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Mark</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">o</span><span class=\"p\">.</span><span class=\"nx\">greeting</span><span class=\"p\">());</span> <span class=\"c1\">// logs \"Hi, I'm Mark\"</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":61},{"question":"What's the difference between Object.seal and Object.freeze methods?","answer":"<p>The difference between these two methods is that when we use the&nbsp;<code>Object.freeze</code>&nbsp;method to an object, that object's properties are immutable meaning we can't change or edit the values of those properties. While in the&nbsp;<code>Object.seal</code>&nbsp;method we can change those existing properties.</p>","categories":[{"name":"Code","id":2}],"id":62},{"question":"What's the difference between the in operator and the hasOwnProperty method in objects?","answer":"<p>As you know both of these features check if a property exists in an object. It will return&nbsp;<code>true</code>false. The difference between them is that the&nbsp;<code>in</code>&nbsp;operator also checks the objects'&nbsp;<strong>Prototype Chain</strong>&nbsp;if the property was not found in the current object while the&nbsp;<code>hasOwnProperty</code>&nbsp;method just checks if the property exists in the current object ignoring the&nbsp;<strong>Prototype Chain</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// We'll still use the object in the previous question.</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">prop</span><span class=\"dl\">\"</span> <span class=\"k\">in</span> <span class=\"nx\">o</span><span class=\"p\">);</span> <span class=\"c1\">// This logs true;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">toString</span><span class=\"dl\">\"</span> <span class=\"k\">in</span> <span class=\"nx\">o</span><span class=\"p\">);</span> <span class=\"c1\">// This logs true, the toString method is available in this object's prototype which is the Object.prototype</span>\n\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">o</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">prop</span><span class=\"dl\">\"</span><span class=\"p\">));</span> <span class=\"c1\">// This logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">o</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">toString</span><span class=\"dl\">\"</span><span class=\"p\">));</span> <span class=\"c1\">// This logs false, does not</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":63},{"question":"What are the ways to deal with Asynchronous Code in JavasScript?","answer":"<ul>\n<li>Callbacks</li>\n<li>Promises</li>\n<li>async/await</li>\n<li>Libraries like&nbsp;async.js,&nbsp;bluebird,&nbsp;q,&nbsp;co</li>\n</ul>","categories":[{"name":"Code","id":2}],"id":64},{"question":"What's the difference between a function expression and function declaration?","answer":"<p>Suppose we have an example below.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">hoistedFunc</span><span class=\"p\">();</span>\n<span class=\"nx\">notHoistedFunc</span><span class=\"p\">();</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">hoistedFunc</span><span class=\"p\">(){</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">I am hoisted</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">notHoistedFunc</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">I will not be hoisted!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>The&nbsp;<code>notHoistedFunc</code>&nbsp;call throws an error while the&nbsp;<code>hoistedFunc</code>&nbsp;call does not because the&nbsp;<code>hoistedFunc</code>&nbsp;is&nbsp;<em>hoisted</em>&nbsp;while the&nbsp;<code>notHoistedFunc</code> is not.</p>","categories":[{"name":"Code","id":2}],"id":65},{"question":"How many ways can a function be invoked?","answer":"<p>There are 4 ways that a function can be&nbsp;<em>invoked</em>&nbsp;in&nbsp;<strong>JavaScript</strong>. The&nbsp;<strong>invocation</strong>&nbsp;determines the value of&nbsp;<code>this</code>&nbsp;or the \"owner\" object of that function.</p>\n<ul>\n<li><strong>Invocation as a function</strong>&nbsp;- If a function isn't invoked as a method, as a constructor or with the&nbsp;<code>apply</code>,&nbsp;<code>call</code>&nbsp;methods then it is&nbsp;<strong>invoked as a function</strong>. The \"owner\" object of this function will be the&nbsp;<code>window</code>&nbsp;object.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"c1\">//Global Scope</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"nx\">b</span><span class=\"p\">){</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>  \n\n  <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">);</span> <span class=\"c1\">// logs the \"window\" object and returns 6</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">o</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">method</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">){</span>\n      <span class=\"nx\">callback</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">o</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(){</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span> <span class=\"c1\">// logs the \"window\" object</span>\n  <span class=\"p\">});</span>\n</code></pre>\n</div>\n<ul>\n<li><strong>Invocation as a method</strong>&nbsp;- If a property of an object has a value of a function we call it a&nbsp;<strong>method</strong>. When that&nbsp;<strong>method</strong>&nbsp;is&nbsp;<em>invoked</em>&nbsp;the&nbsp;<code>this</code>&nbsp;value of that method will be that object.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"kd\">const</span> <span class=\"nx\">details</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     <span class=\"na\">name</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Marko</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n     <span class=\"nx\">getName</span><span class=\"p\">(){</span>\n       <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"nx\">details</span><span class=\"p\">.</span><span class=\"nx\">getName</span><span class=\"p\">();</span> <span class=\"c1\">// returns Marko</span>\n   <span class=\"c1\">// the \"this\" value inside \"getName\" method will be the \"details\" object </span>\n</code></pre>\n</div>\n<ul>\n<li><strong>Invocation as a constructor</strong>&nbsp;- If a function was&nbsp;<em>invoked</em>&nbsp;with a&nbsp;<code>new</code>&nbsp;keyword before it then it's called a&nbsp;<code>function constructor</code>. An empty object will be created and&nbsp;<code>this</code>&nbsp;will point to that object.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">Employee</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">position</span><span class=\"p\">,</span> <span class=\"nx\">yearHired</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// creates an empty object {}</span>\n  <span class=\"c1\">// then assigns the empty object to the \"this\" keyword</span>\n  <span class=\"c1\">// this = {};</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">position</span> <span class=\"o\">=</span> <span class=\"nx\">position</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">yearHired</span> <span class=\"o\">=</span> <span class=\"nx\">yearHired</span><span class=\"p\">;</span>\n  <span class=\"c1\">// inherits from Employee.prototype</span>\n  <span class=\"c1\">// returns the \"this\" value implicitly if no </span>\n  <span class=\"c1\">// explicit return statement is specified</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">emp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Employee</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Marko Polo</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Software Developer</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"p\">);</span>\n\n</code></pre>\n</div>\n<ul>\n<li><strong>Invocation with the&nbsp;<code>apply</code>&nbsp;and&nbsp;<code>call</code>&nbsp;methods</strong>&nbsp;- If we want to&nbsp;<em>explicitly</em>&nbsp;specify the&nbsp;<code>this</code>&nbsp;value or the \"owner\" object of a function we can use these methods. These methods are available for all functions.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">obj1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n <span class=\"na\">result</span><span class=\"p\">:</span><span class=\"mi\">0</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n <span class=\"na\">result</span><span class=\"p\">:</span><span class=\"mi\">0</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"kd\">function</span> <span class=\"nx\">reduceAdd</span><span class=\"p\">(){</span>\n   <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">arguments</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n     <span class=\"nx\">result</span> <span class=\"o\">+=</span> <span class=\"nx\">arguments</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nx\">reduceAdd</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">obj1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]);</span>  <span class=\"c1\">//the \"this\" object inside the \"reduceAdd\" function will be \"obj1\"</span>\n<span class=\"nx\">reduceAdd</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">obj2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">);</span> <span class=\"c1\">//the \"this\" object inside the \"reduceAdd\" function will be \"obj2\"</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":66},{"question":"What is memoization and what's the use it?","answer":"<p><em>memoization</em>&nbsp;is a process of building a function that is capable of&nbsp;<strong>remembering</strong>&nbsp;it's previously computed results or values.<br />The use of making a&nbsp;<em>memoization</em>&nbsp;function is that we avoid the computation of that function if it was already performed in the last calculations with the same arguments. This saves time but has a downside that we will consume more memory for saving the previous results.</p>","categories":[{"name":"Code","id":2}],"id":67},{"question":"Implement a memoization helper function.","answer":"<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">memoize</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">cache</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">param</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">param</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">cached</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">param</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">param</span><span class=\"p\">);</span>\n      <span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">param</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`not cached`</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">toUpper</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">str</span> <span class=\"o\">=</span><span class=\"dl\">\"\"</span><span class=\"p\">)</span><span class=\"o\">=&gt;</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">toUpperCase</span><span class=\"p\">();</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">toUpperMemoized</span> <span class=\"o\">=</span> <span class=\"nx\">memoize</span><span class=\"p\">(</span><span class=\"nx\">toUpper</span><span class=\"p\">);</span>\n\n<span class=\"nx\">toUpperMemoized</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">abcdef</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">toUpperMemoized</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">abcdef</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n<p>This&nbsp;<em>memoize</em>&nbsp;helper function only works on a function that accepts one&nbsp;<em>argument</em>. We need to make a&nbsp;<em>memoize</em>&nbsp;helper function that accepts multiple&nbsp;<em>arguments</em>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">slice</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">memoize</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">cache</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n  <span class=\"k\">return</span> <span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">params</span> <span class=\"o\">=</span> <span class=\"nx\">slice</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">params</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">cached</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">params</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n      <span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">params</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`not cached`</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">const</span> <span class=\"nx\">makeFullName</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">fName</span><span class=\"p\">,</span> <span class=\"nx\">lName</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">fName</span><span class=\"p\">}</span> <span class=\"p\">${</span><span class=\"nx\">lName</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">reduceAdd</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">numbers</span><span class=\"p\">,</span> <span class=\"nx\">startingValue</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">numbers</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">total</span><span class=\"p\">,</span> <span class=\"nx\">cur</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">total</span> <span class=\"o\">+</span> <span class=\"nx\">cur</span><span class=\"p\">,</span> <span class=\"nx\">startingValue</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">memoizedMakeFullName</span> <span class=\"o\">=</span> <span class=\"nx\">memoize</span><span class=\"p\">(</span><span class=\"nx\">makeFullName</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">memoizedReduceAdd</span> <span class=\"o\">=</span> <span class=\"nx\">memoize</span><span class=\"p\">(</span><span class=\"nx\">reduceAdd</span><span class=\"p\">);</span>\n\n<span class=\"nx\">memoizedMakeFullName</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Marko</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Polo</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">memoizedMakeFullName</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Marko</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Polo</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"nx\">memoizedReduceAdd</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">);</span>\n<span class=\"nx\">memoizedReduceAdd</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">);</span>\n</code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":68},{"question":"Why does typeof null return object? How to check if a value is null?","answer":"<p><code>typeof null == 'object'</code>&nbsp;will always return&nbsp;<code>true</code>&nbsp;because this was the implementation of&nbsp;<code>null</code>&nbsp;since the birth of&nbsp;<strong>JavaScript</strong>. A fix was proposed to change&nbsp;<code>typeof null == 'object'</code>&nbsp;to&nbsp;<code>typeof null == 'null'&nbsp;</code>but was&nbsp;rejected&nbsp;because it will lead to more bugs.</p>\n<p>We can use the&nbsp;<code>===</code>&nbsp;or&nbsp;<strong>strict equality</strong>&nbsp;operator to check if a value is&nbsp;<code>null</code>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"kd\">function</span> <span class=\"nx\">isNull</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":69},{"question":"What does the new keyword do?","answer":"<p>The&nbsp;<code>new</code>&nbsp;keyword is used with&nbsp;<em>constructor</em>&nbsp;functions to make objects<br />in&nbsp;<strong>JavaScript</strong>.</p>\n<p>Suppose we have an example code below.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">Employee</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">position</span><span class=\"p\">,</span> <span class=\"nx\">yearHired</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">position</span> <span class=\"o\">=</span> <span class=\"nx\">position</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">yearHired</span> <span class=\"o\">=</span> <span class=\"nx\">yearHired</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">emp</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Employee</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Marko Polo</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Software Developer</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">2017</span><span class=\"p\">);</span>\n\n</code></pre>\n</div>\n<p>The&nbsp;<code>new</code>&nbsp;keyword does 4 things.</p>\n<ul>\n<li>Creates an empty object.</li>\n<li>Assigns that empty object to the&nbsp;<code>this</code>&nbsp;value.</li>\n<li>The function will&nbsp;<em>inherit</em>&nbsp;from&nbsp;<strong>functionName.prototype</strong>.</li>\n<li>Returns the&nbsp;<code>this</code>&nbsp;if no Explicit&nbsp;<code>return</code>&nbsp;statement is used.</li>\n</ul>\n<p>In the above image, it will first create an empty object&nbsp;<code>{}</code>&nbsp;then<br />it will the&nbsp;<code>this</code>&nbsp;value to that empty object&nbsp;<code>this = {}</code>&nbsp;and add properties to that&nbsp;<code>this</code>&nbsp;object. Because we don't have a explicit&nbsp;<code>return</code>&nbsp;statement it automatically returns the&nbsp;<code>this</code>&nbsp;for us.</p>","categories":[{"name":"Code","id":2}],"id":70}]}}