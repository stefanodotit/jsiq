{"id":24,"questions":{"2":[{"question":"What's the difference between undefined and null?","answer":"<p>Before understanding the differences between&nbsp;<code>undefined</code>&nbsp;and&nbsp;<code>null</code>&nbsp;we must understand the similarities between them.</p>\n<ul>\n<li>They belong to&nbsp;<strong>JavaScript's</strong>&nbsp;7 primitive types.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code> <span class=\"kd\">let</span> <span class=\"nx\">primitiveTypes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">string</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"dl\">'</span><span class=\"s1\">number</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"dl\">'</span><span class=\"s1\">null</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"dl\">'</span><span class=\"s1\">undefined</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"dl\">'</span><span class=\"s1\">boolean</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"dl\">'</span><span class=\"s1\">symbol</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">bigint</span><span class=\"dl\">'</span><span class=\"p\">];</span>\n</code></pre>\n</div>\n<ul>\n<li>They are&nbsp;<strong>falsy</strong>&nbsp;values. Values that evaluated to false when converting it to boolean using&nbsp;<code>Boolean(value)</code>&nbsp;or&nbsp;<code>!!value</code>.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"kc\">null</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"kc\">undefined</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">));</span> <span class=\"c1\">//logs false</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">));</span> <span class=\"c1\">//logs false</span>\n</code></pre>\n</div>\n<p>Ok, let's talk about the differences.</p>\n<ul>\n<li><code>undefined</code>&nbsp;is the default value of a variable that has not been assigned a specific value. Or a function that has no&nbsp;<strong>explicit</strong>&nbsp;return value ex.&nbsp;<code>console.log(1)</code>. Or a property that does not exist in an object. The JavaScript engine does this for us the&nbsp;<strong>assigning</strong>&nbsp;of&nbsp;<code>undefined</code>&nbsp;value.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"kd\">let</span> <span class=\"nx\">_thisIsUndefined</span><span class=\"p\">;</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">doNothing</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{};</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">someObj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">a</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">ay</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">b</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">bee</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">c</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">si</span><span class=\"dl\">\"</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">_thisIsUndefined</span><span class=\"p\">);</span> <span class=\"c1\">//logs undefined</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">doNothing</span><span class=\"p\">());</span> <span class=\"c1\">//logs undefined</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">someObj</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">d</span><span class=\"dl\">\"</span><span class=\"p\">]);</span> <span class=\"c1\">//logs undefined</span>\n</code></pre>\n</div>\n<ul>\n<li><code>null</code>&nbsp;is&nbsp;<strong>\"a value that represents no value\"</strong>.&nbsp;<code>null</code>&nbsp;is value that has been&nbsp;<strong>explicitly</strong>&nbsp;defined to a variable. In this example we get a value of&nbsp;<code>null</code>&nbsp;when the&nbsp;<code>fs.readFile</code>&nbsp;method does not throw an error.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFile</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">path/to/file</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span> <span class=\"c1\">//it logs null when no error occurred</span>\n     <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">){</span>\n       <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n   <span class=\"p\">});</span>\n</code></pre>\n</div>\n<p>When comparing&nbsp;<code>null</code>&nbsp;and&nbsp;<code>undefined</code>&nbsp;we get&nbsp;<code>true</code>&nbsp;when using&nbsp;<code>==</code>&nbsp;and&nbsp;<code>false</code>&nbsp;when using&nbsp;<code>===</code>. You can read the reason&nbsp;<a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#14-whats-the-difference-between-and-\">here</a>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"kc\">null</span> <span class=\"o\">==</span> <span class=\"kc\">undefined</span><span class=\"p\">);</span> <span class=\"c1\">// logs true</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"kc\">null</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">);</span> <span class=\"c1\">// logs false</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":1},{"question":"What does the && operator do?","answer":"<p>The&nbsp;<code>&amp;&amp;</code>&nbsp;or&nbsp;<strong>Logical AND</strong>&nbsp;operator finds the first&nbsp;<em>falsy</em>&nbsp;expression in its operands and returns it and if it does not find any&nbsp;<em>falsy</em>&nbsp;expression it returns the last expression. It employs short-circuiting to prevent unnecessary work. I've used this in the&nbsp;<code>catch</code>&nbsp;block when closing database connection in one of my projects.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"kc\">false</span> <span class=\"o\">&amp;&amp;</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">[]);</span> <span class=\"c1\">//logs false</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span> <span class=\"dl\">\"</span> <span class=\"o\">&amp;&amp;</span> <span class=\"kc\">true</span> <span class=\"o\">&amp;&amp;</span> <span class=\"mi\">5</span><span class=\"p\">);</span> <span class=\"c1\">//logs 5</span>\n</code></pre>\n</div>\n<p>Using&nbsp;<strong>if</strong>&nbsp;statements.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"kd\">const</span> <span class=\"nx\">router</span><span class=\"p\">:</span> <span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"nx\">Router</span><span class=\"p\">();</span>\n\n  <span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/endpoint</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">:</span> <span class=\"nx\">Request</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n     <span class=\"kd\">let</span> <span class=\"na\">conMobile</span><span class=\"p\">:</span> <span class=\"nx\">PoolConnection</span><span class=\"p\">;</span>\n     <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"c1\">//do some db operations</span>\n     <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n     <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">conMobile</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">conMobile</span><span class=\"p\">.</span><span class=\"nx\">release</span><span class=\"p\">();</span>\n     <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n<p>Using&nbsp;<strong>&amp;&amp;</strong>&nbsp;operator.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">router</span><span class=\"p\">:</span> <span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"nx\">Router</span><span class=\"p\">();</span>\n\n<span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/endpoint</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">:</span> <span class=\"nx\">Request</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"na\">conMobile</span><span class=\"p\">:</span> <span class=\"nx\">PoolConnection</span><span class=\"p\">;</span>\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n     <span class=\"c1\">//do some db operations</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">conMobile</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">conMobile</span><span class=\"p\">.</span><span class=\"nx\">release</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":2},{"question":"What does the || operator do?","answer":"<p>The&nbsp;<code>||</code>&nbsp;or&nbsp;<strong>Logical OR</strong>&nbsp;operator finds the first&nbsp;<em>truthy</em>&nbsp;expression in its operands and returns it. This too employs short-circuiting to prevent unnecessary work. It was used before to initialize default parameter values IN functions before&nbsp;<strong>ES6 Default function parameters</strong>&nbsp;was supported.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"kc\">undefined</span><span class=\"p\">);</span> <span class=\"c1\">//logs 1</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">logName</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"nx\">name</span> <span class=\"o\">||</span> <span class=\"dl\">\"</span><span class=\"s2\">Mark</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">logName</span><span class=\"p\">();</span> <span class=\"c1\">//logs \"Mark\"</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":3},{"question":"Is using the + or unary plus operator the fastest way in converting a string to a number?","answer":"<p>According to&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_plus\">MDN Documentation</a>&nbsp;the&nbsp;<code>+</code>&nbsp;is the fastest way of converting a string to a number because it does not perform any operations on the value if it is already a number.</p>","categories":[{"name":"Code","id":2}],"id":4},{"question":"What is the DOM?","answer":"<p><strong>DOM</strong>&nbsp;stands for&nbsp;<strong>Document Object Model</strong>&nbsp;is an interface (<strong>API</strong>) for HTML and XML documents. When the browser first reads (<em>parses</em>) our HTML document it creates a big object, a really big object based on the HTML document this is the&nbsp;<strong>DOM</strong>. It is a tree-like structure that is modeled from the HTML document. The&nbsp;<strong>DOM</strong>&nbsp;is used for interacting and modifying the&nbsp;<strong>DOM structure</strong>&nbsp;or specific Elements or Nodes.</p>\n<p>Imagine if we have an HTML structure like this.</p>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>\n\n<span class=\"nt\">&lt;head&gt;</span>\n   <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"UTF-8\"</span><span class=\"nt\">&gt;</span>\n   <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"viewport\"</span> <span class=\"na\">content=</span><span class=\"s\">\"width=device-width, initial-scale=1.0\"</span><span class=\"nt\">&gt;</span>\n   <span class=\"nt\">&lt;meta</span> <span class=\"na\">http-equiv=</span><span class=\"s\">\"X-UA-Compatible\"</span> <span class=\"na\">content=</span><span class=\"s\">\"ie=edge\"</span><span class=\"nt\">&gt;</span>\n   <span class=\"nt\">&lt;title&gt;</span>Document Object Model<span class=\"nt\">&lt;/title&gt;</span>\n<span class=\"nt\">&lt;/head&gt;</span>\n\n<span class=\"nt\">&lt;body&gt;</span>\n   <span class=\"nt\">&lt;div&gt;</span>\n      <span class=\"nt\">&lt;p&gt;</span>\n         <span class=\"nt\">&lt;span&gt;&lt;/span&gt;</span>\n      <span class=\"nt\">&lt;/p&gt;</span>\n      <span class=\"nt\">&lt;label&gt;&lt;/label&gt;</span>\n      <span class=\"nt\">&lt;input&gt;</span>\n   <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n\n<span class=\"nt\">&lt;/html&gt;</span>\n\n</code></pre>\n</div>\n<p>The&nbsp;<strong>DOM</strong>&nbsp;equivalent would be like this.<br /><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z_mRQj0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/mbqphfbjfie45ynj0teo.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z_mRQj0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/mbqphfbjfie45ynj0teo.png\" alt=\"DOM equivalent\" loading=\"lazy\" /></a></p>\n<p>The&nbsp;<code>document</code>&nbsp;object in&nbsp;<strong>JavaScript</strong>&nbsp;represents the&nbsp;<strong>DOM</strong>. It provides us many methods that we can use to selecting elements to update element contents and many more.</p>","categories":[{"name":"Code","id":2}],"id":5},{"question":"What is Event Propagation?","answer":"<p>When an&nbsp;<strong>event</strong>&nbsp;occurs on a&nbsp;<strong>DOM</strong>&nbsp;element, that&nbsp;<strong>event</strong>&nbsp;does not entirely occur on that just one element. In the&nbsp;<strong>Bubbling Phase</strong>, the&nbsp;<strong>event</strong>&nbsp;bubbles up or it goes to its parent, to its grandparents, to its grandparent's parent until it reaches all the way to the&nbsp;<code>window</code>&nbsp;while in the&nbsp;<strong>Capturing Phase</strong>&nbsp;the event starts from the&nbsp;<code>window</code>&nbsp;down to the element that triggered the event or the&nbsp;<code><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#12-what-is-eventtarget-\">event.target</a></code>.</p>\n<p><strong>Event Propagation</strong>&nbsp;has&nbsp;<strong>three</strong>&nbsp;phases.</p>\n<ol>\n<li><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#8-whats-event-capturing\">Capturing Phase</a>&nbsp;&ndash; the event starts from&nbsp;<code>window</code>&nbsp;then goes down to every element until it reaches the target element.</li>\n<li><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#12-what-is-eventtarget-\">Target Phase</a>&nbsp;&ndash; the event has reached the target element.</li>\n<li><a href=\"https://dev.to/macmacky/70-javascript-interview-questions-5gfi#7-whats-event-bubbling\">Bubbling Phase</a>&nbsp;&ndash; the event bubbles up from the target element then goes up every element until it reaches the&nbsp;<code>window</code>.</li>\n</ol>\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Azk8KRbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hjayqa99iejfhbsujlqd.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Azk8KRbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hjayqa99iejfhbsujlqd.png\" alt=\"Event Propagation\" loading=\"lazy\" /></a></p>","categories":[{"name":"Code","id":2}],"id":6},{"question":"What's Event Bubbling?","answer":"<p>When an&nbsp;<strong>event</strong>&nbsp;occurs on a&nbsp;<strong>DOM</strong>&nbsp;element, that&nbsp;<strong>event</strong>&nbsp;does not entirely occur on that just one element. In the&nbsp;<strong>Bubbling Phase</strong>, the&nbsp;<strong>event</strong>&nbsp;bubbles up or it goes to its parent, to its grandparents, to its grandparent's parent until it reaches all the way to the&nbsp;<code>window</code>.</p>\n<p>If we have an example markup like this.</p>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"grandparent\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"parent\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"child\"</span><span class=\"nt\">&gt;</span>1<span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div>\n<p>And our js code.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">,</span> <span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">,</span> <span class=\"nx\">isCapture</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">el</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">event</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">callback</span> <span class=\"o\">||</span> <span class=\"k\">typeof</span> <span class=\"nx\">callback</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">function</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">el</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">string</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n  <span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">,</span> <span class=\"nx\">isCapture</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">DOMContentLoaded</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">child</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.child</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">parent</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.parent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">grandparent</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.grandparent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">child</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">parent</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">parent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">grandparent</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">grandparent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">document</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">html</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">html</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">window</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n<p>The&nbsp;<code>addEventListener</code>&nbsp;method has a third optional parameter&nbsp;<strong>useCapture</strong>&nbsp;with a default value of&nbsp;<code>false</code>&nbsp;the event will occur in the&nbsp;<strong>Bubbling phase</strong>&nbsp;if&nbsp;<code>true</code>&nbsp;the event will occur in the&nbsp;<strong>Capturing Phase</strong>. If we click on the&nbsp;<code>child</code>&nbsp;element it logs&nbsp;<code>child</code>,<code>parent</code>,<code>grandparent</code>,&nbsp;<code>html</code>,&nbsp;<code>document</code>&nbsp;and&nbsp;<code>window</code>&nbsp;respectively on the&nbsp;<strong>console</strong>. This is&nbsp;<strong>Event Bubbling</strong>.</p>","categories":[{"name":"Code","id":2}],"id":7},{"question":"What's Event Capturing?","answer":"<p>When an&nbsp;<strong>event</strong>&nbsp;occurs on a&nbsp;<strong>DOM</strong>&nbsp;element, that&nbsp;<strong>event</strong>&nbsp;does not entirely occur on that just one element. In&nbsp;<strong>Capturing Phase</strong>, the event starts from the&nbsp;<code>window</code>&nbsp;all the way down to the element that triggered the event.</p>\n<p>If we have an example markup like this.</p>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code> <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"grandparent\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"parent\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"child\"</span><span class=\"nt\">&gt;</span>1<span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div>\n<p>And our js code.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">,</span> <span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">,</span> <span class=\"nx\">isCapture</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">el</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">event</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">callback</span> <span class=\"o\">||</span> <span class=\"k\">typeof</span> <span class=\"nx\">callback</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">function</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">el</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">string</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n  <span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">,</span> <span class=\"nx\">isCapture</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">DOMContentLoaded</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">child</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.child</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">parent</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.parent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">grandparent</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">.grandparent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">child</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">parent</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">parent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nx\">grandparent</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">grandparent</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">document</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">html</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">html</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">addEvent</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">window</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n<p>The&nbsp;<code>addEventListener</code>&nbsp;method has a third optional parameter&nbsp;<strong>useCapture</strong>&nbsp;with a default value of&nbsp;<code>false</code>&nbsp;the event will occur in the&nbsp;<strong>Bubbling phase</strong>&nbsp;if&nbsp;<code>true</code>&nbsp;the event will occur in the&nbsp;<strong>Capturing Phase</strong>. If we click on the&nbsp;<code>child</code>&nbsp;element it logs&nbsp;<code>window</code>,<code>document</code>,<code>html</code>,&nbsp;<code>grandparent</code>&nbsp;and&nbsp;<code>parent</code>&nbsp;and&nbsp;<code>child</code>&nbsp;respectively on the&nbsp;<strong>console</strong>. This is&nbsp;<strong>Event Capturing</strong>.</p>","categories":[{"name":"Code","id":2}],"id":8},{"question":"What's the difference between event.preventDefault() and event.stopPropagation() methods?","answer":"<p>The&nbsp;<code>event.preventDefault()</code>&nbsp;method&nbsp;<strong>prevents</strong>&nbsp;the default behavior of an element. If used in a&nbsp;<code>form</code>&nbsp;element it&nbsp;<strong>prevents</strong>&nbsp;it from submitting. If used in an&nbsp;<code>anchor</code>&nbsp;element it&nbsp;<strong>prevents</strong>&nbsp;it from navigating. If used in a&nbsp;<code>contextmenu</code>&nbsp;it&nbsp;<strong>prevents</strong>&nbsp;it from showing or displaying. While the&nbsp;<code>event.stopPropagation()</code> method stops the propogation of an event or it stops the event from occurring in the bubbling or capturing phase.</p>","categories":[{"name":"Code","id":2}],"id":9},{"question":"How to know if the event.preventDefault() method was used in an element?","answer":"<p>We can use the&nbsp;<code>event.defaultPrevented</code>&nbsp;property in the event object. It returns a&nbsp;<code>boolean</code>&nbsp;indicating if the&nbsp;<code>event.preventDefault()</code>&nbsp;was called in a particular element.</p>","categories":[{"name":"Code","id":2}],"id":10},{"question":"Why does this code obj.someprop.x throw an error?","answer":"<p>Obviously, this throws an error due to the reason we are trying to access a<br /><code>x</code>&nbsp;property in the&nbsp;<code>someprop</code>&nbsp;property which have an&nbsp;<code>undefined</code>&nbsp;value. Remember&nbsp;<strong>properties</strong>&nbsp;in an object which does not exist in itself and its&nbsp;<strong>prototype</strong>&nbsp;has a default value of&nbsp;<code>undefined</code>&nbsp;and&nbsp;<code>undefined</code>&nbsp;has no property&nbsp;<code>x</code>.</p>","categories":[{"name":"Code","id":2}],"id":11},{"question":"What is event.target ?","answer":"<p>In simplest terms, the&nbsp;<strong>event.target</strong>&nbsp;is the element on which the event&nbsp;<strong>occurred</strong>&nbsp;or the element that&nbsp;<strong>triggered</strong>&nbsp;the event.</p>\n<p>Sample HTML Markup.</p>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">onclick=</span><span class=\"s\">\"clickFunc(event)\"</span> <span class=\"na\">style=</span><span class=\"s\">\"text-align: center;margin:15px;\nborder:1px solid red;border-radius:3px;\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"margin: 25px; border:1px solid royalblue;border-radius:3px;\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"margin:25px;border:1px solid skyblue;border-radius:3px;\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;button</span> <span class=\"na\">style=</span><span class=\"s\">\"margin:10px\"</span><span class=\"nt\">&gt;</span>\n             Button\n          <span class=\"nt\">&lt;/button&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div>\n<p>Sample JavaScript.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code> <span class=\"kd\">function</span> <span class=\"nx\">clickFunc</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>If you click the button it will log the&nbsp;<strong>button</strong>&nbsp;markup even though we attach the event on the outermost&nbsp;<code>div</code>&nbsp;it will always log the&nbsp;<strong>button</strong>&nbsp;so we can conclude that the&nbsp;<strong>event.target</strong>&nbsp;is the element that triggered the event.</p>","categories":[{"name":"Code","id":2}],"id":12},{"question":"What is event.currentTarget?","answer":"<p>The&nbsp;<strong>event.currentTarget</strong>&nbsp;is the element on which we attach the event handler&nbsp;<strong>explicitly</strong>.</p>\n<p>Copying the markup in&nbsp;<strong>Question 12</strong>.<br />Sample HTML Markup.</p>\n<div class=\"highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">onclick=</span><span class=\"s\">\"clickFunc(event)\"</span> <span class=\"na\">style=</span><span class=\"s\">\"text-align: center;margin:15px;\nborder:1px solid red;border-radius:3px;\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"margin: 25px; border:1px solid royalblue;border-radius:3px;\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"margin:25px;border:1px solid skyblue;border-radius:3px;\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;button</span> <span class=\"na\">style=</span><span class=\"s\">\"margin:10px\"</span><span class=\"nt\">&gt;</span>\n             Button\n          <span class=\"nt\">&lt;/button&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n</div>\n<p>And changing our the&nbsp;<strong>JS</strong>&nbsp;a little bit.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">clickFunc</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>If you click the button it will log the outermost&nbsp;<strong>div</strong>&nbsp;markup even though we click the button. In this example, we can conclude that the&nbsp;<strong>event.currentTarget</strong>&nbsp;is the element on which we attach the event handler.</p>","categories":[{"name":"Code","id":2}],"id":13},{"question":"What's the difference between == and === ?","answer":"<p>The difference between&nbsp;<code>==</code><strong>(abstract equality)</strong>&nbsp;and&nbsp;<code>===</code><strong>(strict equality)</strong>&nbsp;is that the&nbsp;<code>==</code>&nbsp;compares by&nbsp;<strong>value</strong>&nbsp;after&nbsp;<em>coercion</em>&nbsp;and&nbsp;<code>===</code>&nbsp;compares by&nbsp;<strong>value</strong>&nbsp;and&nbsp;<strong>type</strong>&nbsp;without&nbsp;<em>coercion</em>.</p>\n<p>Let's dig deeper on the&nbsp;<code>==</code>. So first let's talk about&nbsp;<em>coercion</em>.</p>\n<p><em>coercion</em>&nbsp;is the process of converting a value to another type. As in this case, the&nbsp;<code>==</code>&nbsp;does&nbsp;<em>implicit coercion</em>. The&nbsp;<code>==</code>&nbsp;has some conditions to perform before comparing the two values.</p>\n<p>Suppose we have to compare&nbsp;<code>x == y</code>&nbsp;values.</p>\n<ol>\n<li>If&nbsp;<code>x</code>&nbsp;and&nbsp;<code>y</code>&nbsp;have same type. Then compare them with the&nbsp;<code>===</code>&nbsp;operator.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is&nbsp;<code>null</code>&nbsp;and&nbsp;<code>y</code>&nbsp;is&nbsp;<code>undefined</code>&nbsp;then return&nbsp;<code>true</code>.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is&nbsp;<code>undefined</code>&nbsp;and&nbsp;<code>y</code>&nbsp;is&nbsp;<code>null</code>&nbsp;then return&nbsp;<code>true</code>.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is type&nbsp;<code>number</code>&nbsp;and&nbsp;<code>y</code>&nbsp;is type&nbsp;<code>string</code>&nbsp;Then return&nbsp;<code>x == toNumber(y)</code>.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is type&nbsp;<code>string</code>&nbsp;and&nbsp;<code>y</code>&nbsp;is type&nbsp;<code>number</code>&nbsp;Then return&nbsp;<code>toNumber(x) == y</code>.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is type&nbsp;<code>boolean</code>&nbsp;Then return&nbsp;<code>toNumber(x) == y</code>.</li>\n<li>If&nbsp;<code>y</code>&nbsp;is type&nbsp;<code>boolean</code>&nbsp;Then return&nbsp;<code>x == toNumber(y)</code>.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is either&nbsp;<code>string</code>,<code>symbol</code>&nbsp;or&nbsp;<code>number</code>&nbsp;and&nbsp;<code>y</code>&nbsp;is type&nbsp;<code>object</code>&nbsp;Then return&nbsp;<code>x == toPrimitive(y)</code>.</li>\n<li>If&nbsp;<code>x</code>&nbsp;is either&nbsp;<code>object</code>&nbsp;and&nbsp;<code>x</code>&nbsp;is either&nbsp;<code>string</code>,<code>symbol</code>&nbsp;Then return&nbsp;<code>toPrimitive(x) == y</code>.</li>\n<li>Return&nbsp;<code>false</code>.</li>\n</ol>\n<p><strong>Note:</strong>&nbsp;<code>toPrimitive</code>&nbsp;uses first the&nbsp;<code>valueOf</code>&nbsp;method then the&nbsp;<code>toString</code>&nbsp;method in objects to get the primitive value of that object.</p>\n<p>Let's have examples.</p>\n<div class=\"table-wrapper-paragraph\">\n<table>\n<thead>\n<tr>\n<th><code>x</code></th>\n<th><code>y</code></th>\n<th><code>x == y</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>5</code></td>\n<td><code>5</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>1</code></td>\n<td><code>'1'</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>null</code></td>\n<td><code>undefined</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>0</code></td>\n<td><code>false</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>'1,2'</code></td>\n<td><code>[1,2]</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>'[object Object]'</code></td>\n<td><code>{}</code></td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>These examples all return&nbsp;<code>true</code>.</p>\n<p>The&nbsp;<strong>first example</strong>&nbsp;goes to&nbsp;<strong>condition one</strong>&nbsp;because&nbsp;<code>x</code>&nbsp;and&nbsp;<code>y</code>&nbsp;have the same type and value.</p>\n<p>The&nbsp;<strong>second example</strong>&nbsp;goes to&nbsp;<strong>condition four</strong>&nbsp;<code>y</code>&nbsp;is converted to a&nbsp;<code>number</code>&nbsp;before comparing.</p>\n<p>The&nbsp;<strong>third example</strong>&nbsp;goes to&nbsp;<strong>condition two</strong>.</p>\n<p>The&nbsp;<strong>fourth example</strong>&nbsp;goes to&nbsp;<strong>condition seven</strong>&nbsp;because&nbsp;<code>y</code>&nbsp;is&nbsp;<code>boolean</code>.</p>\n<p>The&nbsp;<strong>fifth example</strong>&nbsp;goes to&nbsp;<strong>condition eight</strong>. The array is converted to a&nbsp;<code>string</code>&nbsp;using the&nbsp;<code>toString()</code>&nbsp;method which returns&nbsp;<code>1,2</code>.</p>\n<p>The&nbsp;<strong>last example</strong>&nbsp;goes to&nbsp;<strong>condition ten</strong>. The object is converted to a&nbsp;<code>string</code>&nbsp;using the&nbsp;<code>toString()</code>&nbsp;method which returns&nbsp;<code>[object Object]</code>.</p>\n<div class=\"table-wrapper-paragraph\">\n<table>\n<thead>\n<tr>\n<th><code>x</code></th>\n<th><code>y</code></th>\n<th><code>x === y</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>5</code></td>\n<td><code>5</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td><code>1</code></td>\n<td><code>'1'</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>null</code></td>\n<td><code>undefined</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>0</code></td>\n<td><code>false</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>'1,2'</code></td>\n<td><code>[1,2]</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td><code>'[object Object]'</code></td>\n<td><code>{}</code></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>If we use the&nbsp;<code>===</code>&nbsp;operator all the comparisons except for the first example will return&nbsp;<code>false</code>&nbsp;because they don't have the same type while the first example will return&nbsp;<code>true</code>&nbsp;because the two have the same type and value.</p>","categories":[{"name":"Code","id":2}],"id":14},{"question":"Why does it return false when comparing two similar objects in JavaScript?","answer":"<p>Suppose we have an example below.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n<span class=\"kd\">let</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">a</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n<span class=\"kd\">let</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">a</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">===</span> <span class=\"nx\">b</span><span class=\"p\">);</span> <span class=\"c1\">// logs false even though they have the same property</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span> <span class=\"o\">===</span> <span class=\"nx\">c</span><span class=\"p\">);</span> <span class=\"c1\">// logs true hmm</span>\n</code></pre>\n</div>\n<p><strong>JavaScript</strong>&nbsp;compares&nbsp;<em>objects</em>&nbsp;and&nbsp;<em>primitives</em>&nbsp;differently. In&nbsp;<em>primitives</em>&nbsp;it compares them by&nbsp;<strong>value</strong>&nbsp;while in&nbsp;<em>objects</em>&nbsp;it compares them by&nbsp;<strong>reference</strong>&nbsp;or the&nbsp;<strong>address in memory where the variable is stored</strong>. That's why the first&nbsp;<code>console.log</code>&nbsp;statement returns&nbsp;<code>false</code>&nbsp;and the second&nbsp;<code>console.log</code>&nbsp;statement returns&nbsp;<code>true</code>.&nbsp;<code>a</code>&nbsp;and&nbsp;<code>c</code>&nbsp;have the same reference and&nbsp;<code>a</code>&nbsp;and&nbsp;<code>b</code>&nbsp;are not.</p>","categories":[{"name":"Code","id":2}],"id":15},{"question":"What does the !! operator do?","answer":"<p>The&nbsp;<strong>Double NOT</strong>&nbsp;operator or&nbsp;<strong>!!</strong>&nbsp;coerces the value on the right side into a boolean. basically it's a fancy way of converting a value into a boolean.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"kc\">null</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"kc\">undefined</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"dl\">''</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"kc\">NaN</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"dl\">'</span> <span class=\"dl\">'</span><span class=\"p\">);</span> <span class=\"c1\">//logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"p\">{});</span> <span class=\"c1\">//logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"p\">[]);</span> <span class=\"c1\">//logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">//logs true</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">!!</span><span class=\"p\">[].</span><span class=\"nx\">length</span><span class=\"p\">);</span> <span class=\"c1\">//logs false</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":16},{"question":"How to evaluate multiple expressions in one line?","answer":"<p>We can use the&nbsp;<code>,</code>&nbsp;or comma operator to evaluate multiple expressions in one line. It evaluates from left-to-right and returns the value of the last item on the right or the last operand.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n\n<span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"o\">++</span> <span class=\"p\">,</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">addFive</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">),</span> <span class=\"nx\">x</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nx\">x</span> <span class=\"o\">-=</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"nx\">x</span> <span class=\"o\">+=</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">addFive</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">num</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>If you log the value of&nbsp;<code>x</code>&nbsp;it would be&nbsp;<strong>27</strong>. First, we&nbsp;<strong>increment</strong>&nbsp;the value of x it would be&nbsp;<strong>6</strong>, then we invoke the function&nbsp;<code>addFive(6)</code>&nbsp;and pass the 6 as a parameter and assign the result to&nbsp;<code>x</code>&nbsp;the new value of&nbsp;<code>x</code>&nbsp;would be&nbsp;<strong>11</strong>. After that, we multiply the current value of&nbsp;<code>x</code>&nbsp;to&nbsp;<strong>2</strong>&nbsp;and assign it to&nbsp;<code>x</code>&nbsp;the updated value of&nbsp;<code>x</code>&nbsp;would be&nbsp;<strong>22</strong>. Then, we subtract the current value of&nbsp;<code>x</code>&nbsp;to 5 and assign the result to&nbsp;<code>x</code>&nbsp;the updated value would be&nbsp;<strong>17</strong>. And lastly, we increment the value of&nbsp;<code>x</code>&nbsp;by 10 and assign the updated value to&nbsp;<code>x</code>&nbsp;now the value of&nbsp;<code>x</code>&nbsp;would be&nbsp;<strong>27</strong>.</p>","categories":[{"name":"Code","id":2}],"id":17},{"question":"What is Hoisting?","answer":"<p><strong>Hoisting</strong>&nbsp;is the term used to describe the moving of&nbsp;<em>variables</em>&nbsp;and&nbsp;<em>functions</em>&nbsp;to the top of their&nbsp;<em>(global or function)</em>&nbsp;scope on where we define that variable or function.</p>\n<p>Ok to understand&nbsp;<strong>Hoisting</strong>, I have to explain the&nbsp;<em>execution context</em>.<br />The&nbsp;<strong>Execution Context</strong>&nbsp;is the \"environment of code\" that is currently executing. The&nbsp;<strong>Execution Context</strong>&nbsp;has two phases&nbsp;<em>compilation</em>&nbsp;and&nbsp;<em>execution</em>.</p>\n<p><strong>Compilation</strong>&nbsp;- in this phase it gets all the&nbsp;<em>function declarations</em>&nbsp;and&nbsp;<em>hoists</em>&nbsp;them up to the top of their scope so we can reference them later and gets all&nbsp;<em>variables declaration</em>&nbsp;<strong>(declare with the var keyword)</strong>&nbsp;and also&nbsp;<em>hoists</em>&nbsp;them up and give them a default value of&nbsp;<em>undefined</em>.</p>\n<p><strong>Execution</strong>&nbsp;- in this phase it assigns values to the variables&nbsp;<em>hoisted</em>&nbsp;earlier and it&nbsp;<em>executes</em>&nbsp;or&nbsp;<em>invokes</em>&nbsp;functions&nbsp;<strong>(methods in objects)</strong>.</p>\n<p><strong>Note:</strong>&nbsp;only&nbsp;<strong>function declarations</strong>&nbsp;and variables declared with the&nbsp;<em>var</em>&nbsp;keyword are&nbsp;<em>hoisted</em>&nbsp;not&nbsp;<strong>function expressions</strong>&nbsp;or&nbsp;<strong>arrow functions</strong>,&nbsp;<code>let</code>&nbsp;and&nbsp;<code>const</code>&nbsp;keywords.</p>\n<p>Ok, suppose we have an example code in the&nbsp;<em>global scope</em>&nbsp;below.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Mark</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">){</span>\n  <span class=\"k\">return</span> <span class=\"dl\">'</span><span class=\"s1\">Hello </span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">!</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<p>This code logs&nbsp;<code>undefined</code>,<code>1</code>,&nbsp;<code>Hello Mark!</code>&nbsp;respectively.</p>\n<p>So the&nbsp;<em>compilation</em>&nbsp;phase would look like this.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"dl\">'</span><span class=\"s1\">Hello </span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">!</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">y</span><span class=\"p\">;</span> <span class=\"c1\">//implicit \"undefined\" assignment</span>\n\n<span class=\"c1\">//waiting for \"compilation\" phase to finish</span>\n\n<span class=\"c1\">//then start \"execution\" phase</span>\n<span class=\"cm\">/*\nconsole.log(y);\ny = 1;\nconsole.log(y);\nconsole.log(greet(\"Mark\"));\n*/</span>\n\n</code></pre>\n</div>\n<p>for example purposes, I commented on the&nbsp;<em>assignment</em>&nbsp;of variable and&nbsp;<em>function call</em>.</p>\n<p>After the&nbsp;<em>compilation</em>&nbsp;phase finishes it starts the&nbsp;<em>execution</em>&nbsp;phase invoking methods and assigns values to variables.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"dl\">'</span><span class=\"s1\">Hello </span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">!</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n\n<span class=\"c1\">//start \"execution\" phase</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Mark</span><span class=\"dl\">\"</span><span class=\"p\">));</span></code></pre>\n</div>","categories":[{"name":"Code","id":2}],"id":18},{"question":"What is Scope?","answer":"<p><strong>Scope</strong>&nbsp;in JavaScript is the&nbsp;<strong>area</strong>&nbsp;where we have valid access to variables or functions. JavaScript has three types of Scopes.&nbsp;<strong>Global Scope</strong>,&nbsp;<strong>Function Scope</strong>, and&nbsp;<strong>Block Scope(ES6)</strong>.</p>\n<ul>\n<li><strong>Global Scope</strong>&nbsp;- variables or functions declared in the global namespace are in the global scope and therefore is accessible everywhere in our code.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"c1\">//global namespace</span>\n   <span class=\"kd\">var</span> <span class=\"nx\">g</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">global</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n   <span class=\"kd\">function</span> <span class=\"nx\">globalFunc</span><span class=\"p\">(){</span>\n     <span class=\"kd\">function</span> <span class=\"nx\">innerFunc</span><span class=\"p\">(){</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">g</span><span class=\"p\">);</span> <span class=\"c1\">// can access \"g\" because \"g\" is a global variable</span>\n     <span class=\"p\">}</span>\n     <span class=\"nx\">innerFunc</span><span class=\"p\">();</span>\n   <span class=\"p\">}</span>  \n</code></pre>\n</div>\n<ul>\n<li><strong>Function Scope</strong>&nbsp;- variables,functions and parameters declared within a function are accessible inside that function but not outside of it.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>    <span class=\"kd\">function</span> <span class=\"nx\">myFavoriteFunc</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Hello </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">a</span><span class=\"p\">;</span>\n       <span class=\"p\">}</span>\n       <span class=\"k\">return</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"nx\">myFavoriteFunc</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">World</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// Throws a ReferenceError \"a\" is not defined</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span> <span class=\"c1\">// does not continue here </span>\n</code></pre>\n</div>\n<ul>\n<li><strong>Block Scope</strong>&nbsp;- variables&nbsp;<strong>(<code>let</code>,<code>const</code>)</strong>&nbsp;declared within a block&nbsp;<code>{}</code>&nbsp;can only be access within it.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code> <span class=\"kd\">function</span> <span class=\"nx\">testBlock</span><span class=\"p\">(){</span>\n   <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">){</span>\n     <span class=\"kd\">let</span> <span class=\"nx\">z</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"nx\">z</span><span class=\"p\">;</span> \n <span class=\"p\">}</span>\n\n <span class=\"nx\">testBlock</span><span class=\"p\">();</span> <span class=\"c1\">// Throws a ReferenceError \"z\" is not defined</span>\n</code></pre>\n</div>\n<p><strong>Scope</strong>&nbsp;is also a set of rules for finding variables. If a variable does not exist in the&nbsp;<strong>current scope</strong>&nbsp;it&nbsp;<strong>look ups</strong>&nbsp;and searches for a variable in the&nbsp;<strong>outer scope</strong>&nbsp;and if does not exist again it&nbsp;<strong>looks up</strong>&nbsp;again until it reaches the&nbsp;<strong>global scope</strong>&nbsp;if the variable exists then we can use it if not it throws an error. It searches for the&nbsp;<strong>nearest</strong>&nbsp;variable and it stops&nbsp;<strong>searching</strong>&nbsp;or&nbsp;<strong>looking up</strong>&nbsp;once it finds it. This is called&nbsp;<strong>Scope Chain</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"cm\">/* Scope Chain\n   Inside inner function perspective\n\n   inner's scope -&gt; outer's scope -&gt; global's scope\n  */</span>\n\n\n  <span class=\"c1\">//Global Scope</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">variable1</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Comrades</span><span class=\"dl\">\"</span><span class=\"p\">;</span>   \n  <span class=\"kd\">var</span> <span class=\"nx\">variable2</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Sayonara</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">outer</span><span class=\"p\">(){</span>\n  <span class=\"c1\">//outer's scope</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">variable1</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">World</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">inner</span><span class=\"p\">(){</span>\n    <span class=\"c1\">//inner's scope</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">variable2</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Hello</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">variable2</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span> <span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">variable1</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">inner</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>  \n  <span class=\"nx\">outer</span><span class=\"p\">();</span> \n<span class=\"c1\">// logs Hello World </span>\n<span class=\"c1\">// because (variable2 = \"Hello\") and (variable1 = \"World\") are the nearest </span>\n<span class=\"c1\">// variables inside inner's scope.</span>\n</code></pre>\n</div>\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dJFL2g1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/l81b3nmdonimex0qsgyr.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dJFL2g1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/l81b3nmdonimex0qsgyr.png\" alt=\"Scope\" loading=\"lazy\" /></a></p>","categories":[{"name":"Code","id":2}],"id":19},{"question":"What are Closures?","answer":"<p>This is probably the hardest question of all these questions because&nbsp;<strong>Closures</strong>&nbsp;is a controversial topic. So I'm gonna explain it from what I understand.</p>\n<p><strong>Closures</strong>&nbsp;is simply the ability of a function at the time of declaration to remember the references of variables and parameters on its current scope, on its parent function scope, on its parent's parent function scope until it reaches the global scope with the help of&nbsp;<strong>Scope Chain</strong>. Basically it is the&nbsp;<strong>Scope</strong>&nbsp;created when the function was declared.</p>\n<p>Examples are a great way to explain closures.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"c1\">//Global's Scope</span>\n   <span class=\"kd\">var</span> <span class=\"nx\">globalVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">abc</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n   <span class=\"kd\">function</span> <span class=\"nx\">a</span><span class=\"p\">(){</span>\n   <span class=\"c1\">//testClosures's Scope</span>\n     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">globalVar</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"nx\">a</span><span class=\"p\">();</span> <span class=\"c1\">//logs \"abc\" </span>\n   <span class=\"cm\">/* Scope Chain\n      Inside a function perspective\n\n      a's scope -&gt; global's scope  \n   */</span> \n</code></pre>\n</div>\n<p>In this example, when we declare the&nbsp;<code>a</code>&nbsp;function the&nbsp;<strong>Global Scope</strong>&nbsp;is part of&nbsp;<code>a's</code>&nbsp;<em>closure</em>.</p>\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gbH9Uqec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/teatokuw4xvgtlzbzhn8.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gbH9Uqec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/teatokuw4xvgtlzbzhn8.png\" alt=\"a's closure\" loading=\"lazy\" /></a></p>\n<p>The reason for the variable&nbsp;<code>globalVar</code>&nbsp;which does not have a value in the image because of the reason that the value of that variable can change based on&nbsp;<strong>where</strong>&nbsp;and&nbsp;<strong>when</strong>&nbsp;we invoke the&nbsp;<code>a</code>&nbsp;function.<br />But in our example above the&nbsp;<code>globalVar</code>&nbsp;variable will have the value of&nbsp;<strong>abc</strong>.</p>\n<p>Ok, let's have a complex example.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">globalVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">global</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">outerVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">outer</span><span class=\"dl\">\"</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">outerFunc</span><span class=\"p\">(</span><span class=\"nx\">outerParam</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">innerFunc</span><span class=\"p\">(</span><span class=\"nx\">innerParam</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">globalVar</span><span class=\"p\">,</span> <span class=\"nx\">outerParam</span><span class=\"p\">,</span> <span class=\"nx\">innerParam</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">innerFunc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">outerFunc</span><span class=\"p\">(</span><span class=\"nx\">outerVar</span><span class=\"p\">);</span>\n<span class=\"nx\">outerVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">outer-2</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">globalVar</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">guess</span><span class=\"dl\">\"</span>\n<span class=\"nx\">x</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">inner</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n<p><a class=\"article-body-image-wrapper\" href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--inSFoNQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/e4hxm7zvz8eun2ppenwp.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--inSFoNQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/e4hxm7zvz8eun2ppenwp.png\" alt=\"Complex\" loading=\"lazy\" /></a><br />This will print \"guess outer inner\". The explanation for this is that when we invoke the&nbsp;<code>outerFunc</code>&nbsp;function and assigned the returned value the&nbsp;<code>innerFunc</code>&nbsp;function to the variable&nbsp;<code>x</code>, the&nbsp;<code>outerParam</code>&nbsp;will have a value of&nbsp;<strong>outer</strong>&nbsp;even though we assign a new value&nbsp;<strong>outer-2</strong>&nbsp;to the&nbsp;<code>outerVar</code>&nbsp;variable because<br />the reassignment happened after the invocation of the&nbsp;<code>outer</code>&nbsp;function and in that time when we invoke the&nbsp;<code>outerFunc</code>&nbsp;function it's look up the value of&nbsp;<code>outerVar</code>&nbsp;in the&nbsp;<strong>Scope Chain</strong>, the&nbsp;<code>outerVar</code>&nbsp;will have a value of&nbsp;<strong>\"outer\"</strong>. Now, when we invoke the&nbsp;<code>x</code>&nbsp;variable which have a reference to the&nbsp;<code>innerFunc</code>, the<br /><code>innerParam</code>&nbsp;will have a value of&nbsp;<strong>inner</strong>&nbsp;because thats the value we pass in the invocation and the&nbsp;<code>globalVar</code>&nbsp;variable will have a value of&nbsp;<strong>guess</strong>&nbsp;because before the invocation of the&nbsp;<code>x</code>&nbsp;variable we assign a new value to the&nbsp;<code>globalVar</code>&nbsp;and at the time of invocation&nbsp;<code>x</code>&nbsp;the value of&nbsp;<code>globalVar</code>&nbsp;in the_<em>Scope Chain</em>_ is<br /><strong>guess</strong>.</p>\n<p>We have an example that demonstrates a problem of not understanding closure correctly.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">arrFuncs</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n  <span class=\"nx\">arrFuncs</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">);</span> <span class=\"c1\">// i is 5</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">arrFuncs</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">arrFuncs</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]());</span> <span class=\"c1\">// all logs \"5\"</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n<p>This code is not working as we expected because of&nbsp;<strong>Closures</strong>.<br />The&nbsp;<code>var</code>&nbsp;keyword makes a global variable and when we push a function<br />we return the global variable&nbsp;<code>i</code>. So when we call one of those functions in that array after the loop it logs&nbsp;<code>5</code>&nbsp;because we get<br />the current value of&nbsp;<code>i</code>&nbsp;which is&nbsp;<code>5</code>&nbsp;and we can access it because it's a global variable. Because&nbsp;<strong>Closures</strong>&nbsp;keeps the&nbsp;<strong>references</strong>&nbsp;of that variable not its&nbsp;<strong>values</strong>&nbsp;at the time of it's creation. We can solve this using&nbsp;<strong>IIFES</strong>&nbsp;or changing the&nbsp;<code>var</code>&nbsp;keyword to&nbsp;<code>let</code>&nbsp;for block-scoping.</p>","categories":[{"name":"Code","id":2}],"id":20},{"question":"What are the falsy values in JavaScript?","answer":"<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code> <span class=\"kd\">const</span> <span class=\"nx\">falsyValues</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">''</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"kc\">NaN</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">];</span>\n</code></pre>\n</div>\n<p><strong>falsy</strong>&nbsp;values are values that when converted to boolean becomes&nbsp;<strong>false</strong>.</p>","categories":[{"name":"Code","id":2}],"id":21},{"question":"How to check if a value is falsy?","answer":"<p>Use the&nbsp;<strong>Boolean</strong> function or the Double NOT operator !!</p>","categories":[{"name":"Code","id":2}],"id":22},{"question":"What does \"use strict\" do?","answer":"<p><code>\"use strict\"</code>&nbsp;is a ES5 feature in&nbsp;<strong>JavaScript</strong>&nbsp;that makes our code in&nbsp;<strong>Strict Mode</strong>&nbsp;in&nbsp;<em>functions</em>&nbsp;or&nbsp;<em>entire scripts</em>.&nbsp;<strong>Strict Mode</strong>&nbsp;helps us avoid&nbsp;<strong>bugs</strong>&nbsp;early on in our code and adds restrictions to it.</p>\n<p>Restrictions that&nbsp;<strong>Strict Mode</strong>&nbsp;gives us.</p>\n<ul>\n<li>Assigning or Accessing a variable that is not declared.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code> <span class=\"kd\">function</span> <span class=\"nx\">returnY</span><span class=\"p\">(){</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n    <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</code></pre>\n</div>\n<ul>\n<li>Assigning a value to a read-only or non-writable global variable;</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n   <span class=\"kd\">var</span> <span class=\"kc\">NaN</span> <span class=\"o\">=</span> <span class=\"kc\">NaN</span><span class=\"p\">;</span>\n   <span class=\"kd\">var</span> <span class=\"kc\">undefined</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n   <span class=\"kd\">var</span> <span class=\"kc\">Infinity</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">and beyond</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<ul>\n<li>Deleting an undeletable property.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n   <span class=\"kd\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n\n   <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">x</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">value</span> <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">1</span><span class=\"dl\">'</span>\n   <span class=\"p\">});</span>  \n\n   <span class=\"k\">delete</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">x</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n<ul>\n<li>Duplicate parameter names.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n   <span class=\"kd\">function</span> <span class=\"nx\">someFunc</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">){</span>\n\n   <span class=\"p\">}</span>\n</code></pre>\n</div>\n<ul>\n<li>Creating variables with the use of the&nbsp;<strong>eval</strong>&nbsp;function.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code> <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">var x = 1;</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">);</span> <span class=\"c1\">//Throws a Reference Error x is not defined</span>\n\n</code></pre>\n</div>\n<ul>\n<li>The default value of&nbsp;<strong>this</strong>&nbsp;will be&nbsp;<code>undefined</code>.</li>\n</ul>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"dl\">\"</span><span class=\"s2\">use strict</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">function</span> <span class=\"nx\">showMeThis</span><span class=\"p\">(){</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">showMeThis</span><span class=\"p\">();</span> <span class=\"c1\">//returns undefined</span>\n</code></pre>\n</div>\n<p>There are many more restrictions in&nbsp;<strong>Strict Mode</strong>&nbsp;than these.</p>","categories":[{"name":"Code","id":2}],"id":23},{"question":"What's the value of this in JavaScript?","answer":"<p>Basically,&nbsp;<code>this</code>&nbsp;refers to the value of the object that is currently executing or invoking the function. I say&nbsp;<strong>currently</strong>&nbsp;due to the reason that the value of&nbsp;<strong>this</strong>&nbsp;changes depending on the context on which we use it and where we use it.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"kd\">const</span> <span class=\"nx\">carDetails</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Ford Mustang</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n     <span class=\"na\">yearBought</span><span class=\"p\">:</span> <span class=\"mi\">2005</span><span class=\"p\">,</span>\n     <span class=\"nx\">getName</span><span class=\"p\">(){</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n     <span class=\"p\">},</span>\n     <span class=\"na\">isRegistered</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n   <span class=\"p\">};</span>\n\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">carDetails</span><span class=\"p\">.</span><span class=\"nx\">getName</span><span class=\"p\">());</span> <span class=\"c1\">// logs Ford Mustang</span>\n</code></pre>\n</div>\n<p>This is what we would normally expect because in the&nbsp;<strong>getName</strong>&nbsp;method we return&nbsp;<code>this.name</code>,&nbsp;<code>this</code>&nbsp;in this context refers to the object which is the&nbsp;<code>carDetails</code>&nbsp;object that is currently the \"owner\" object of the function executing.</p>\n<p>Ok, Let's some add some code to make it weird. Below the&nbsp;<code>console.log</code>&nbsp;statement add this three lines of code</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Ford Ranger</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n   <span class=\"kd\">var</span> <span class=\"nx\">getCarName</span> <span class=\"o\">=</span> <span class=\"nx\">carDetails</span><span class=\"p\">.</span><span class=\"nx\">getName</span><span class=\"p\">;</span>\n\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">getCarName</span><span class=\"p\">());</span> <span class=\"c1\">// logs Ford Ranger</span>\n</code></pre>\n</div>\n<p>The second&nbsp;<code>console.log</code>&nbsp;statement prints the word&nbsp;<strong>Ford Ranger</strong>&nbsp;which is weird because in our first&nbsp;<code>console.log</code>&nbsp;statement it printed&nbsp;<strong>Ford Mustang</strong>. The reason to this is that the&nbsp;<code>getCarName</code>&nbsp;method has a different \"owner\" object that is the&nbsp;<code>window</code>&nbsp;object. Declaring variables with the&nbsp;<code>var</code>&nbsp;keyword in the global scope attaches properties in the&nbsp;<code>window</code>&nbsp;object with the same name as the variables. Remember&nbsp;<code>this</code>&nbsp;in the global scope refers to the&nbsp;<code>window</code>&nbsp;object when&nbsp;<code>\"use strict\"</code>&nbsp;is not used.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">getCarName</span> <span class=\"o\">===</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">getCarName</span><span class=\"p\">);</span> <span class=\"c1\">//logs true</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">getCarName</span> <span class=\"o\">===</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getCarName</span><span class=\"p\">);</span> <span class=\"c1\">// logs true</span>\n</code></pre>\n</div>\n<p><code>this</code>&nbsp;and&nbsp;<code>window</code>&nbsp;in this example refer to the same object.</p>\n<p>One way of solving this problem is by using the&nbsp;<code>apply</code>&nbsp;and&nbsp;<code>call</code>&nbsp;methods in functions.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">getCarName</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">carDetails</span><span class=\"p\">));</span> <span class=\"c1\">//logs Ford Mustang</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">getCarName</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">carDetails</span><span class=\"p\">));</span>  <span class=\"c1\">//logs Ford Mustang</span>\n</code></pre>\n</div>\n<p>The&nbsp;<code>apply</code>&nbsp;and&nbsp;<code>call</code>&nbsp;methods expects the first parameter to be an object which would be value of&nbsp;<code>this</code>&nbsp;inside that function.</p>\n<p><strong>IIFE</strong>&nbsp;or&nbsp;<strong>Immediately Invoked Function Expression</strong>, Functions that are declared in the global scope,&nbsp;<strong>Anonymous Functions</strong>&nbsp;and Inner functions in methods inside an object has a default of&nbsp;<strong>this</strong>&nbsp;which points to the&nbsp;<strong>window</strong>&nbsp;object.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(){</span>\n     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n   <span class=\"p\">})();</span> <span class=\"c1\">//logs the \"window\" object</span>\n\n   <span class=\"kd\">function</span> <span class=\"nx\">iHateThis</span><span class=\"p\">(){</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"nx\">iHateThis</span><span class=\"p\">();</span> <span class=\"c1\">//logs the \"window\" object  </span>\n\n   <span class=\"kd\">const</span> <span class=\"nx\">myFavoriteObj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     <span class=\"nx\">guessThis</span><span class=\"p\">(){</span>\n        <span class=\"kd\">function</span> <span class=\"nx\">getThis</span><span class=\"p\">(){</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">getThis</span><span class=\"p\">();</span>\n     <span class=\"p\">},</span>\n     <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Marko Polo</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n     <span class=\"nx\">thisIsAnnoying</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">){</span>\n       <span class=\"nx\">callback</span><span class=\"p\">();</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">};</span>\n\n\n   <span class=\"nx\">myFavoriteObj</span><span class=\"p\">.</span><span class=\"nx\">guessThis</span><span class=\"p\">();</span> <span class=\"c1\">//logs the \"window\" object</span>\n   <span class=\"nx\">myFavoriteObj</span><span class=\"p\">.</span><span class=\"nx\">thisIsAnnoying</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(){</span>\n     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span> <span class=\"c1\">//logs the \"window\" object</span>\n   <span class=\"p\">});</span>\n</code></pre>\n</div>\n<p>If we want to get the value of the&nbsp;<code>name</code>&nbsp;property which is&nbsp;<strong>Marko Polo</strong>&nbsp;in the&nbsp;<code>myFavoriteObj</code>&nbsp;object there are two ways to solve this.</p>\n<p>First, we save the value of&nbsp;<code>this</code>&nbsp;in a variable.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"kd\">const</span> <span class=\"nx\">myFavoriteObj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     <span class=\"nx\">guessThis</span><span class=\"p\">(){</span>\n         <span class=\"kd\">const</span> <span class=\"nb\">self</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span> <span class=\"c1\">//saves the this value to the \"self\" variable</span>\n         <span class=\"kd\">function</span> <span class=\"nx\">getName</span><span class=\"p\">(){</span>\n           <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n         <span class=\"p\">}</span>\n         <span class=\"nx\">getName</span><span class=\"p\">();</span>\n     <span class=\"p\">},</span>\n     <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Marko Polo</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n     <span class=\"nx\">thisIsAnnoying</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">){</span>\n       <span class=\"nx\">callback</span><span class=\"p\">();</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">};</span>\n</code></pre>\n</div>\n<p>In this image we save the value of&nbsp;<code>this</code>&nbsp;which would be the&nbsp;<code>myFavoriteObj</code>&nbsp;object. So we can access it inside the&nbsp;<code>getName</code>&nbsp;inner function.</p>\n<p>Second, we use&nbsp;<strong>ES6 Arrow Functions</strong>.</p>\n<div class=\"highlight\">\n<pre class=\"highlight javascript\"><code>   <span class=\"kd\">const</span> <span class=\"nx\">myFavoriteObj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     <span class=\"nx\">guessThis</span><span class=\"p\">(){</span>\n         <span class=\"kd\">const</span> <span class=\"nx\">getName</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> \n           <span class=\"c1\">//copies the value of \"this\" outside of this arrow function</span>\n           <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n         <span class=\"p\">}</span>\n         <span class=\"nx\">getName</span><span class=\"p\">();</span>\n     <span class=\"p\">},</span>\n     <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Marko Polo</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n     <span class=\"nx\">thisIsAnnoying</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">){</span>\n       <span class=\"nx\">callback</span><span class=\"p\">();</span>\n     <span class=\"p\">}</span>\n   <span class=\"p\">};</span>\n</code></pre>\n</div>\n<p>Arrow Functions does not have its own <code>this</code>. It copies the value of&nbsp;<code>this</code>&nbsp;of the enclosing lexical scope or in this example the value of&nbsp;<code>this</code>&nbsp;outside the&nbsp;<code>getName</code>&nbsp;inner function which would be the&nbsp;<code>myFavoriteObj</code>&nbsp;object. We can also determine the value of&nbsp;<code>this</code> on how the function is invoked.</p>","categories":[{"name":"Code","id":2}],"id":24}]}}